<?xml version="1.0" encoding="UTF-8"?>

<!--
  * technicalreference.xml
  *
  * Copyright (c) 2000-2008 John Willinsky
  * Distributed under the GNU GPL v2. For full terms see the file docs/COPYING.
  *
  * Technical Reference
  *
  * $Id: technicalreference.xml,v 1.1 2008/07/04 06:02:32 asmecher Exp $
  -->

<book xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <info>
        <title>OJS Technical Reference</title>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Alec</firstname>
                    <surname>Smecher</surname>
                </personname>
                <email>asmecher@smecher.bc.ca</email>
            </author>
        </authorgroup>
        <pubdate>June 25 2008</pubdate>
        <releaseinfo>4th Edition</releaseinfo>
        <publisher>
            <publishername>The Public Knowledge Project</publishername>
            <address>
                <city>Burnaby</city>
                <street>8888 University Drive</street>
                <postcode>V5A 1S6</postcode>
                <country>Canada</country>
            </address>
        </publisher>
        <copyright>
            <year>2008</year>
            <holder>Simon Fraser University Library</holder>
        </copyright>
        <legalnotice>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../common/cc.png" format="PNG"/>
                </imageobject>
            </mediaobject>
            <para>This document was written under the auspices of the Public Knowledge Project at SFU
                Library and is licensed under the Creative Commons Attribution-Share Alike 2.5 Canada
                License. To view a copy of this license, visit <link
                    xlink:href="http://creativecommons.org/licenses/by-sa/2.5/ca/"
                    >http://creativecommons.org/licenses/by-sa/2.5/ca/</link> or send a letter to Creative
                Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.</para>
        </legalnotice>
    </info>
    <preface xml:id="preface">
        <title>Preface</title>
        <para>The Public Knowledge Project is a research and development initiative directed toward
            improving the scholarly and public quality of academic research through the development
            of innovative online publishing and knowledge-sharing environments.</para>
        <para>Begun in 1998, PKP has developed <link xlink:href="http://pkp.sfu.ca/ojs">Open Journal
                Systems</link> and <link xlink:href="http://pkp.sfu.ca/ocs">Open Conference
            Systems</link>, free software for the management, publishing, and indexing of journals
            and conferences, as well as <link xlink:href="http://pkp.sfu.ca/harvester">Open Archives
                Harvester</link> and <link xlink:href="http://pkp.sfu.ca/lemon8">Lemon8-XML</link>
            to facilitate the indexing of research and scholarship. This open source software is
            being used around the world to increase access to knowledge and improve its scholarly
            management, while considerably reducing publishing costs. See <link
                xlink:href="http://pkp.sfu.ca/">the PKP website</link> for demos, downloads, and
            information about these systems.</para>
        <para>Located at the <link xlink:href="http://www.ubc.ca">University of British
            Columbia</link>, <link xlink:href="http://www.sfu.ca/">Simon Fraser University</link>,
                <link xlink:href="http://ed.stanford.edu/suse/">Stanford University</link>, and
                <link xlink:href="http://www.asu.edu/">Arizona State University</link>, the PKP also
            sustains an active research program on the impact of increased access to knowledge, with
            the resulting publications, dating back to 1998, available on the website. </para>

        <para>
   
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../common/logo_list.png" format="PNG"/>
                </imageobject>
                <textobject>
                    <phrase>Simon Fraser University Library; UBC Faculty of Education; Canadian Centre for Studies in Publishing; Standford University; Arizona State University</phrase>
                </textobject>
            </mediaobject>
        </para>

    </preface>
    <preface xml:id="introduction">
        <title>Introduction</title>
        <sect1 xml:id="introductionAboutOJS">
            <title>About Open Journal Systems</title>

            <para>Open Journal Systems (OJS) is a journal management and publishing system that has
                been developed by the Public Knowledge Project through its federally funded efforts
                to expand and improve access to research. OJS assists with every stage of the
                refereed publishing process, from submissions through to online publication and
                indexing. Through its management systems, its finely grained indexing of research,
                and the context it provides for research, OJS seeks to improve both the scholarly
                and public quality of referred research. OJS is open source software made freely
                available to journals worldwide for the purpose of making open access publishing a
                viable option for more journals, as open access can increase a journal's readership
                as well as its contribution to the public good on a global scale.</para>

            <para>Version 2.x represents a complete rebuild and rewrite of Open Journal Systems 1.x,
                based on two years of working with the editors of the 250 journals using OJS in
                whole or in part around the world. With the launch of OJS v2.0, the Public Knowledge
                Project is moving its open source software development (including Open Conference
                Systems and PKP Harvester) to Simon Fraser University Library, in a partnership that
                also includes the Canadian Center for Studies in Publishing at SFU.</para>

            <para>User documentation for OJS 2.x can be found on the Internet at <link
                    xlink:href="http://pkp.sfu.ca/ojs_documentation"
                    >http://pkp.sfu.ca/ojs_documentation</link>; a demonstration site is available
                at <link xlink:href="http://pkp.sfu.ca/ojs_demo"
            >http://pkp.sfu.ca/ojs_demo</link>.</para>
        </sect1>
        <sect1 xml:id="introductionAboutThisDocument">
            <title>About This Document</title>
            <sect2 xml:id="introductionConventions">
                <title>Conventions</title>
                <itemizedlist>
                    <listitem>
                        <para><code>Code samples</code>, <filename>filenames</filename>,
                                <filename>directories</filename> and <filename>class
                            names</filename> are presented in a courier
                            typeface.<!-- what about URLs? --></para>
                    </listitem>
                    <listitem>
                        <para>Square braces are used in code samples, filenames, URLs, and class
                            names to indicate a sample value: for example,
                                <filename>[anything]Handler.inc.php</filename> can be interpreted as
                            any file name ending in <filename>Handler.inc.php</filename>.</para>
                    </listitem>
                    <listitem>
                        <para>The URL <link xlink:href="http://www.mylibrary.com/"
                                >http://www.mylibrary.com</link> used in many examples is intended
                            as a fictional illustration only.</para>
                    </listitem>
                </itemizedlist>

            </sect2>
        </sect1>
        <sect1 xml:id="introductionTechnologies">
            <title>Technologies</title>

            <para>Open Journal Systems 2.x is written in object-oriented PHP (<link
                    xlink:href="http://www.php.net/">http://www.php.net</link>) using the Smarty
                template system for user interface abstraction (<link
                    xlink:href="http://smarty.net/">http://smarty.net</link>). Data is
                stored in a SQL database, with database calls abstracted via the ADODB Database
                Abstraction library (<link xlink:href="http://adodb.sourceforge.net/"
                    >http://adodb.sourceforge.net</link>).</para>

            <para>Recommended server configurations:</para>

            <itemizedlist>
                <listitem>
                    <para>PHP support (4.2.x or later)</para>
                </listitem>
                <listitem>
                    <para>MySQL (3.23.23 or later) or PostgreSQL (7.1 or later)</para>
                </listitem>
                <listitem>
                    <para>Apache (1.3.2x or later) or Apache 2 (2.0.4x or later) or Microsoft IIS 6
                        (PHP 5.x required)</para>
                </listitem>
                <listitem>
                    <para>Linux, BSD, Solaris, Mac OS X, Windows operating systems</para>
                </listitem>
            </itemizedlist>


            <para>Other versions or platforms may work but are not supported and may not have been
                tested. We welcome feedback from users who have successfully run OJS on platforms
                not listed above.</para>
        </sect1>
    </preface>

    <chapter xml:id="designOverview">
        <title>Design Overview</title>
        <sect1 xml:id="designOverviewConventions">
            <title>Conventions</title>
            <sect2 xml:id="designOverviewGeneral">
                <title>General</title>

                <itemizedlist>
                    <listitem>
                        <para>Directories are named using the lowerCamelCase capitalization
                            convention;</para>
                    </listitem>
                    <listitem>
                        <para>Because OJS 2.x supports multiple languages, no assumptions should be
                            made about word orderings. Any language-specific strings should be
                            defined in the appropriate locale files, making use of variable
                            replacement as necessary.</para>
                    </listitem>
                </itemizedlist>
            </sect2>
            <sect2 xml:id="designOverviewUserInterface">
                <title>User Interface</title>
                <itemizedlist>
                    <listitem>
                        <para>Layout should be separated from content using Cascading Style Sheets
                            (CSS);</para>
                    </listitem>
                    <listitem>
                        <para>Smarty templates should be valid XHTML 1.0 Transitional (see <link
                                xlink:href="http://validator.w3.org/"
                            >http://validator.w3.org/</link>).</para>
                    </listitem>
                </itemizedlist>
            </sect2>
            <sect2 xml:id="designOverviewPhpCode">
                <title>PHP Code</title>

                <itemizedlist>
                    <listitem>
                        <para>Wherever possible, global variables and functions outside of classes
                            should be avoided;</para>
                    </listitem>
                    <listitem>
                        <para>Symbolic constants, mapped to integers using the PHP
                            <code>define</code> function, are preferred to numeric or string
                            constants;</para>
                    </listitem>
                    <listitem>
                        <para>Filenames should match class names; for example, the
                                <code>SectionEditorAction</code> class is in the file
                                <filename>SectionEditorAction.inc.php</filename>;</para>
                    </listitem>
                    <listitem>
                        <para>Class names and variables should be capitalized as follows: Class
                            names use CamelCase, and instances use lowerCamelCase. For example,
                            instances of a class <code>MyClass</code> could be called
                            <code>$myClass</code>;</para>
                    </listitem>
                    <listitem>
                        <para>Whenever possible and logical, the variable name should match the
                            class name: For example, <code>$myClass</code> is preferred to an
                            arbitrary name like <code>$x</code>;</para>
                    </listitem>
                    <listitem>
                        <para>Class names and source code filenames should be descriptive and
                            unique;</para>
                    </listitem>
                    <listitem>
                        <para>Output should be restricted as much as possible to Smarty templates. A
                            valid situation in which PHP code should output a response is when HTTP
                            headers are necessary;</para>
                    </listitem>
                    <listitem>
                        <para>To increase performance and decrease server load,
                            <code>import(...)</code> calls should be kept as localized as
                        possible;</para>
                    </listitem>
                </itemizedlist>
            </sect2>
            <sect2 xml:id="designOverviewDatabase">
                <title>Database</title>

                <itemizedlist>
                    <listitem>
                        <para>SQL tables are named in the plural (e.g. <code>users</code>,
                                <code>journals</code>) and table names are lower case;</para>
                    </listitem>
                    <listitem>
                        <para>SQL database feature requirements should be kept minimal to promote
                            broad compatibility. For example, since databases handle date arithmetic
                            incompatibly, it is performed in the PHP code rather than at the
                            database level.</para>
                    </listitem>
                    <listitem>
                        <para>All SQL schema information should be maintained in
                                <filename>dbscripts/xml/ojs_schema.xml</filename> (except plugin
                            schema, described later).</para>
                    </listitem>
                </itemizedlist>
            </sect2>
            <sect2 xml:id="designOverviewSecurity">
                <title>Security</title>

                <itemizedlist>
                    <listitem>
                        <para>The validity of user requests is checked both at the User Interface
                            level and in the associated Page class. For example, if a user is not
                            allowed to click on a particular button, it will be disabled in HTML by
                            the Smarty template. If the user attempts to circumvent this and submits
                            the button click anyway, the Page class receiving the form or request
                            will ensure that it is ignored.</para>
                    </listitem>
                    <listitem>
                        <para>Wherever possible, use the Smarty template engine's string escape
                            features to ensure that HTML exploits and bugs are avoided and special
                            characters are displayed properly. Only the Journal Manager and Site
                            Administrator should be able to input unchecked HTML, and only in
                            certain fields (such as the multiline fields in Journal Settings). For
                            example, when displaying a username, always use the following:
                                <code>{$user->getUsername()|escape}</code></para>
                    </listitem>
                    <listitem>
                        <para>Limited HTML support can be provided using the Smarty
                            strip_unsafe_html modifier, e.g.
                            <code>{$myVariable|strip_unsafe_html}</code></para>
                    </listitem>
                </itemizedlist>
            </sect2>
        </sect1>

        <sect1 xml:id="designOverviewIntroduction">
            <title>Introduction</title>

            <para>The design of Open Journal Systems 2.x is heavily structured for maintainability,
                flexibility and robustness. For this reason it may seem complex when first
                approached. Those familiar with Sun's Enterprise Java Beans technology or the
                Model-View-Controller (MVC) pattern will note many similarities.</para>

            <para>As in a MVC structure, data storage and representation, user interface
                presentation, and control are separated into different layers. The major categories,
                roughly ordered from “front-end" to “back-end," follow:</para>

            <itemizedlist>
                <listitem>
                    <para><emphasis role="strong">
                            <link linkend="classReferenceTemplateSupport">Smarty templates</link>
                        </emphasis>, which are responsible for assembling HTML pages to display to
                        users;</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">
                            <link linkend="classReferencePageClasses">Page classes</link>
                        </emphasis>, which receive requests from users' web browsers, delegate any
                        required processing to various other classes, and call up the appropriate
                        Smarty template to generate a response;</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">
                            <link linkend="classReferenceActionClasses">Action classes</link>
                        </emphasis>, which are used by the Page classes to perform non-trivial
                        processing of user requests;</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">
                            <link linkend="classReferenceModelClasses">Model classes</link>
                        </emphasis>, which implement PHP objects representing the system's various
                        entities, such as Users, Articles, and Journals;</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">
                            <link linkend="classReferenceDataAccessObjects">Data Access Objects
                                (DAOs)</link>
                        </emphasis>, which generally provide (amongst others) update, create, and
                        delete functions for their associated Model classes, are responsible for all
                        database interaction;</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">
                            <link linkend="classReferenceSupportClasses">Support classes</link>
                        </emphasis>, which provide core functionalities, miscellaneous common
                        classes and functions, etc.</para>
                </listitem>
            </itemizedlist>


            <para>As the system makes use of inheritance and has consistent class naming
                conventions, it is generally easy to tell what category a particular class falls
                into. For example, a Data Access Object class always inherits from the
                <code>DAO</code> class, has a class name of the form <code>[Something]DAO</code>,
                and has a filename of the form <code>[Something]DAO.inc.php</code>.</para>


            <para>The following diagram illustrates the various components and their interactions.</para>

            <para>
                <figure xml:id="fig1">
                    <title>Open Journal Systems MVC Diagram</title>
                    <screenshot><mediaobject>
                        <imageobject>
                            <imagedata fileref="figures/fig1.png" format="PNG"/>
                        </imageobject>
                        <textobject>
                            <phrase>Open Journal Systems MVC Diagram</phrase>
                        </textobject>
                    </mediaobject></screenshot>
                </figure>
            </para>

            <para>The following files are in the root directory of a typical OJS 2.x installation: </para>

            <table frame="all" xml:id="tableFileStructure">
                <title>Open Journal Systems File Structure</title>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>
                                <para>File/Directory</para>
                            </entry>
                            <entry>
                                <para>Description</para>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <para>
                                    <filename>cache</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing cached information</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>classes</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing most of the OJS 2.x PHP code: Model
                                    classes, Data Access Objects (DAOs), core classes, etc</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>config.TEMPLATE.inc.php</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Sample configuration file</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>config.inc.php</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>System-wide configuration file</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>dbscripts</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing XML database schemas and data such as
                                    email templates</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>docs</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing system documentation</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>help</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing system help XML documents</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>includes</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing system bootstrapping PHP code: class
                                    loading, miscellaneous global functions</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>index.php</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>All requests are processed through this PHP script, whose task
                                    it is to invoke the appropriate code elsewhere in the
                                system</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>js</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing client-side javascript files</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>lib</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing ADODB (database abstraction) and Smarty
                                    (template system) classes</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>locale</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing locale data and caches</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>pages</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing Page classes</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>plugins</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing additional plugins</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>public</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing files to be made available to remote
                                    browsers; for example, journal logos are placed here by the
                                    system</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>registry</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing various XML data required by the system:
                                    scheduled tasks, available locale names, default journal
                                    settings, words to avoid when indexing content.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>rt</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing XML data used by the Reading Tools</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>styles</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing CSS stylesheets used by the system</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>templates</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing all Smarty templates</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <filename>tools</filename>
                                </para>
                            </entry>
                            <entry>
                                <para>Directory containing tools to help maintain the system: unused
                                    locale key finder, scheduled task wrapper, SQL generator,
                                etc.</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect1>
        <sect1 xml:id="designOverviewRequestHandling">
            <title>Request Handling</title>

            <para>The way the system handles a request from a remote browser is somewhat confusing
                if the code is examined directly, because of the use of stub files whose sole
                purpose is to call on the correct PHP class. For example, although the standard
                    <filename>index.php</filename> file appears in many locations, it almost never
                performs any actual work on its own.</para>

            <para>Instead, work is delegated to the appropriate Page classes, each of which is a
                subclass of the <code>Handler</code> class and resides in the
                <filename>pages</filename> directory of the source tree.</para>
            <sect2 xml:id="designOverviewNoteOnUrls">
                <title>A Note on URLs</title>

                <para>Generally, URLs into OJS make use of the <code>PATH_INFO</code> variable. For
                    example, examine the following (fictional) URL:</para>

                <informalexample>
                    <para>
                        <link
                            xlink:href="http://www.mylibrary.com/ojs2/index.php/myjournal/user/profile"
                            >http://www.mylibrary.com/ojs2/index.php/myjournal/user/profile</link>
                    </para>
                </informalexample>

                <para>The PHP script invoked to handle this request, <filename>index.php</filename>,
                    appears halfway through the URL. The portion of the URL appearing after this is
                    passed to <filename>index.php</filename> via a CGI variable called
                        <filename>PATH_INFO</filename>.</para>

                <para>Some server configurations do not properly handle requests like this, which
                    most often results in a 404 error when processing this sort of URL. If the
                    server cannot be re-configured to properly handle these requests, OJS can be
                    configured to use an alternate method of generating URLs. See the
                        <code>disable_path_info</code> option in
                    <filename>config.inc.php</filename>. When this method is used, OJS will generate
                    URLs unlike those used as examples in this document. For example, the URL above
                    would appear as:</para>
                <informalexample>
                    <para>
                        <link
                            xlink:href="http://www.mylibrary.com/ojs2/index.php?journal=myjournal&amp;page=user&amp;op=profile"
                            >http://www.mylibrary.com/ojs2/index.php?journal=myjournal&amp;page=user&amp;op=profile</link>
                    </para>
                </informalexample>
            </sect2>
            <sect2 xml:id="designOverviewRequestHandlingExample">
                <title>Request Handling Example</title>

                <para>Predictably, delegation of request handling occurs based on the request URL. A
                    typical URL for a journal is:</para>
                <informalexample>
                    <para>
                        <link
                            xlink:href="http://www.mylibrary.com/ojs2/index.php/myjournal/user/profile"
                            >http://www.mylibrary.com/ojs2/index.php/myjournal/user/profile</link>
                    </para>
                </informalexample>

                <para>The following paragraphs describe in a basic fashion how the system handles a
                    request for the above URL. It may be useful to follow the source code at each
                    step for a more comprehensive understanding of the process.</para>

                <para>In this example, <link xlink:href="http://www.mylibrary.com/ojs2/index.php"
                        >http://www.mylibrary.com/ojs2/index.php</link> is the path to and filename
                    of the root <filename>index.php</filename> file in the source tree. All requests
                    pass through this PHP script, whose task is to ensure that the system is
                    properly configured and to pass control to the appropriate place.</para>

                <para>After <filename>index.php</filename>, there are several more components to the
                    URL. The function of the first two (in this case, <code>myjournal</code> and
                        <code>user</code>) is predefined; if others follow, they serve as parameters
                    to the appropriate handler function.</para>

                <para>An Open Journal Systems 2.x installation can host multiple journals;
                        <code>myjournal</code> identifies the particular journal this request refers
                    to. There are several situations in which no particular journal is being
                    referred to, such as when a user is viewing the Site Administration pages. In
                    this case, this field takes a value of <code>index</code>.</para>

                <para>The next field in this example URL identifies the particular Page class that
                    will be used to process this request. In this example, the system would handle a
                    request for the above URL by attempting to load the file
                        <filename>pages/user/index.php</filename>; a brief glance at that file
                    indicates that it simply defines a constant identifying the Page class name (in
                    this case, <code>UserHandler</code>) and loads the PHP file defining that class.</para>

                <para>The last field, <code>profile</code> in this case, now comes into play. It
                    identifies the particular function of the Page class that will be called to
                    handle the request. In the above example, this is the <code>profile</code>
                    method of the <code>UserHandler</code> class (defined in the
                        <filename>pages/user/UserHandler.inc.php</filename> file).</para>
            </sect2>
            <sect2 xml:id="designOverviewLocatingRequestHandlingCode">
                <title>Locating Request Handling Code</title>

                <para>Once the framework responsible for dispatching requests is understood, it is
                    fairly easy to locate the code responsible for performing a certain task in
                    order to modify or extend it. The code that delegates control to the appropriate
                    classes has been written with extensibility in mind; that is, it should rarely
                    need modification.</para>

                <para>In order to find the code that handles a specific request, follow these steps:</para>

                <itemizedlist>
                    <listitem>
                        <para>Find the name of the Page class in the request URL. This is the second
                            field after <filename>index.php</filename>; for example, in the
                            following URL:</para>

                        <informalexample>
                            <para>
                                <link
                                    xlink:href="http://www.mylibrary.com/index.php/myjournal/user/profile"
                                    >http://www.mylibrary.com/index.php/myjournal/user/profile</link>
                            </para>
                        </informalexample>

                        <para>the name of the Page class is <code>UserHandler</code>. (Page classes
                            always end with <code>Handler</code>. Also note the <link
                                linkend="designOverviewConventions">differences in
                            capitalization</link>: in the URL, lowerCamelCase is used; class names
                            are always CamelCase.)</para>
                    </listitem>
                    <listitem>
                        <para>Find the source code for this Page class in the
                            <filename>pages</filename> directory of the source tree. In the above
                            example, the source code is in
                            <filename>pages/user/UserHandler.inc.php</filename>.</para>
                    </listitem>
                    <listitem>
                        <para>Determine which function is being called by examining the URL. This is
                            the third field after <filename>index.php</filename>, or, in this case,
                                <code>profile</code>.</para>
                    </listitem>
                    <listitem>
                        <para>Therefore, the handling code for this request is in the file
                                <filename>pages/user/UserHandler.inc.php</filename>, in the function
                                <code>profile</code>.</para>
                    </listitem>
                </itemizedlist>
            </sect2>
        </sect1>
    </chapter>
    <chapter xml:id="designOverviewDatabaseDesign">
        <title>Database Design</title>

        <para>The Open Journal Systems 2.x database design is flexible, comprehensive, and
            consistent; however, owing to the number of features and options the system offers, it
            is also fairly broad in its scope.</para>

        <para>For further information, please see <filename>dbscripts/xml/ojs_schema.xml</filename>.</para>

        <table frame="all" xml:id="tableOjsSchema">
            <title>OJS Database Schema</title>
            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>
                            <para>Table Name</para>
                        </entry>
                        <entry>
                            <para>Primary Key</para>
                        </entry>
                        <entry>
                            <para>Description</para>
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <para>
                                <code>access_&#x200b;keys</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>access_&#x200b;key_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores keys for one-click reviewer access</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;authors</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>author_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores article authors on a per-article basis</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;comments</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>comment_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores comments between members of the article editing process;
                                note that this is not used for reader comments</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;email_&#x200b;log</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>log_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores log entries describing emails that have been sent with
                                regard to a specific article</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;event_&#x200b;log</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>log_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores log entries describing events that have taken place with
                                regard to a specific article</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;files</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>file_&#x200b;id</code>, <code>revision</code></para>
                        </entry>
                        <entry>
                            <para>Stores information regarding the various files (e.g. images,
                                galleys, supplementary files) associated with a particular
                            article</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;galleys</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>galley_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about a particular layout (or “galley")
                                associated with a particular article</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;html_&#x200b;galley_&#x200b;images</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>galley_&#x200b;id</code>,
                                <code>file_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>Associates images with galleys stored in the
                                    <code>article_&#x200b;galleys</code> table</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;notes</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>note_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores notes made for tracking purposes about a particular article
                                by the editor(s)</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;search_&#x200b;object_&#x200b;keywords</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>object_&#x200b;id</code>, <code>pos</code></para>
                        </entry>
                        <entry>
                            <para>Provides an index associating keywords, by position, with search
                                objects they appear in</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;search_&#x200b;objects</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>object_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Lists search “objects", or entities that can be searched.</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;search_&#x200b;keyword_&#x200b;list</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>keyword_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores all keywords appearing in items the system has
                            indexed</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>article_&#x200b;supplementary_&#x200b;files</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>supp_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about supplementary files belonging to a
                                particular article</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>articles</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>article_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information on every submission in the system</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>comments</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>comment_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores reader comments about articles</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>copyed_&#x200b;assignments</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>copyed_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about copy editor assignments</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>currencies</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>currency_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about currencies available to the subscription
                                subsystem</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>custom_&#x200b;section_&#x200b;orders</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>issue_&#x200b;id</code>,
                                <code>section_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>Stores information about issue-specific ordering of journal
                                sections</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>edit_&#x200b;assignments</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>edit_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information on editing assignments</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>edit_&#x200b;decisions</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>edit_&#x200b;decision_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores editor decisions with regard to a particular article</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>email_&#x200b;templates</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>email_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores a list of email templates that have been modified by the
                                journal manager</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>email_&#x200b;templates_&#x200b;data</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>email_&#x200b;id</code>, <code>locale</code>,
                                    <code>journal_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>Stores locale-specific text for emails in
                                    <code>email_&#x200b;templates</code> that have been modified
                                by the journal manager </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>email_&#x200b;templates_&#x200b;default</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>email_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores a list of default email templates shipped with this version
                                of OJS 2.x</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>email_&#x200b;templates_&#x200b;default_&#x200b;data</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>email_&#x200b;id</code>, <code>locale</code>,
                                    <code>journal_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>Stores locale-specific text for emails in
                                    <code>email_&#x200b;templates_&#x200b;default</code>
                                that shipped with this version of OJS 2.x</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>group_&#x200b;memberships</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>user_&#x200b;id</code>,
                                <code>group_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>Stores membership information for groups</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>groups</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>group_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about groups (a.k.a. custom masthead)</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>issues</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>issue_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about particular issues of hosted
                            journals</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>journal_&#x200b;settings</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>journal_&#x200b;id</code>,
                                    <code>setting_&#x200b;name</code></para>
                        </entry>
                        <entry>
                            <para>Provides a means of storing arbitrary-type settings for each
                                journal</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>journals</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>journal_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores a list of hosted journals and a small amount of metadata.
                                (Most metadata is stored in
                                <code>journal_&#x200b;settings</code>)</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>layouted_&#x200b;assignments</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>layouted_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about layout editor assignments</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>notification_&#x200b;status</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>journal_&#x200b;id</code>,
                                <code>user_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>If a user wishes to be notified about a particular journal, they
                                are associated with the journal ID in this table</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>oai_&#x200b;resumption_&#x200b;tokens</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>token</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Contains resumption tokens for the OAI protocol interface</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>plugin_&#x200b;settings</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>plugin_&#x200b;name</code>,
                                <code>journal_&#x200b;id</code>,
                                <code>setting_&#x200b;name</code></para>
                        </entry>
                        <entry>
                            <para>Stores settings for individual plugins</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>proof_&#x200b;assignments</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>proof_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about proofreading assignments</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>published_&#x200b;articles</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>pub_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>When an article is published, an entry in this table is created to
                                augment information in the <code>articles</code> table</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>review_&#x200b;assignments</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>review_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about reviewer assignments</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>review_&#x200b;rounds</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>article_&#x200b;id</code>, <code>round</code></para>
                        </entry>
                        <entry>
                            <para>Associates an article ID with a review file revision for each
                                round of review</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>roles</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>journal_&#x200b;id</code>,
                                <code>role_&#x200b;id</code>,
                            <code>user_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>Defines what roles (manager, editor, reviewer, ...) users have
                                within particular journals</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>rt_&#x200b;contexts</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>context_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Reading Tools contexts</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>rt_&#x200b;searches</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>search_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Reading Tools searches</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>rt_&#x200b;settings</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>journal_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Reading Tools settings for each journal</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>rt_&#x200b;versions</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>version_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Reading Tool versions</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>scheduled_&#x200b;tasks</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>class_&#x200b;name</code>
                            </para>
                        </entry>
                        <entry>
                            <para>On systems supporting scheduled tasks, this table is used by the
                                task execution script to store information about when tasks were
                                last performed</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>section_&#x200b;editors</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>journal_&#x200b;id</code>,
                                <code>section_&#x200b;id</code>,
                                <code>user_&#x200b;id</code></para>
                        </entry>
                        <entry>
                            <para>Associates section editors with sections of journals that they
                                edit</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>sections</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>section_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Defines sections within which journals can publish articles</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>sessions</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>session_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores session information for the users who are currently using
                                the system</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>site</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>title</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores site-wide configuration information</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>subscription_&#x200b;types</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>type_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Defines types of subscriptions made available by the subscription
                                subsystem</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>subscriptions</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>subscription_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Describes subscriptions “owned" by the system's users</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>temporary_&#x200b;files</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>file_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Used for situations in which a file must be temporarily stored on
                                the server between user requests</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>users</code>
                            </para>
                        </entry>
                        <entry>
                            <para>
                                <code>user_&#x200b;id</code>
                            </para>
                        </entry>
                        <entry>
                            <para>Stores information about every user registered with the
                            system</para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>
                                <code>versions</code>
                            </para>
                        </entry>
                        <entry>
                            <para><code>major</code>, <code>minor</code>, <code>revision</code>,
                                    <code>build</code></para>
                        </entry>
                        <entry>
                            <para>Stores information about the current deployment of OJS 2.x</para>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </chapter>
    <chapter xml:id="classReference">
        <title>Class Reference</title>
        <sect1 xml:id="classReferenceClassHierarchy">
            <title>Class Hierarchy</title>

            <para>All classes and subclasses of the major OJS 2.x objects can be found in the
                project's automatically-generated Doxygen documentation, found online at <link
                    xlink:href="http://pkp.sfu.ca/ojs/doxygen/html/annotated.html"
                    >http://pkp.sfu.ca/ojs/doxygen/html/annotated.html</link>.</para>
        </sect1>
        <sect1 xml:id="classReferencePageClasses">
            <title>Page Classes</title>


            <para>Pages classes receive requests from users' web browsers, delegate any required
                processing to various other classes, and call up the appropriate Smarty template to
                generate a response (if necessary). All page classes are located in the
                    <filename>pages</filename> directory, and each of them must extend the
                    <code>Handler</code> class (see
                <filename>classes/core/Handler.inc.php</filename>).</para>

            <para>Additionally, page classes are responsible for ensuring that user requests are
                valid and any authentication requirements are met. As much as possible,
                user-submitted form parameters and URL parameters should be handled in Page classes
                and not elsewhere, unless a Form class is being used to handle parameters.</para>

            <para>An easy way to become acquainted with the tasks a Page class must fulfill is to
                examine a typical one. The file
                <filename>pages/about/AboutHandler.inc.php</filename> contains the code implementing
                the class <code>AboutHandler</code>, which handles requests such as <link
                    xlink:href="http://www.mylibrary.com/ojs2/myjournal/about/siteMap"
                    >http://www.mylibrary.com/ojs2/myjournal/about/siteMap</link>. This is a fairly
                simple Page class responsible for fetching and displaying various metadata about the
                journal and site being viewed.</para>

            <para>Each Page class implements a number of functions that can be called by the user by
                addressing the appropriate Page class and function in the request URL. (See the
                section titled “Request Handling" for more information on the mapping between URLs
                and page classes.)</para>

            <para>Often, Page classes handle requests based on the role the user is playing. For
                example, there is a Page class called <code>AuthorHandler</code> (in the directory
                    <filename>pages/author/AuthorHandler.inc.php</filename>) that delegates
                processing of the various tasks an author might perform. Similarly, there are
                classes called <code>LayoutEditorHandler</code>, <code>ManagerHandler</code>, and so
                forth.</para>

            <para>The number of tasks a Page handler must perform can frequently be considerable.
                For example, if all requests for Section Editor functions were handled directly by
                the <code>SectionEditorHandler</code> class, it would be extremely large and
                difficult to maintain. Instead, functions are further subdivided into several other
                classes (such as <code>SubmissionEditHandler</code> and
                    <code>SubmissionCommentsHandler</code>), with <code>SectionEditorHandler</code>
                itself remaining just to invoke the specific subclass.</para>
        </sect1>
        <sect1 xml:id="classReferenceActionClasses">
            <title>Action Classes</title>

            <para>Action Classes are used by the Page classes to perform non-trivial processing of
                user requests. For example, the <code>SectionEditorAction</code> class is invoked by
                the <code>SectionEditorHandler</code> class or its subclasses (see Page Classes) to
                perform as much of the work as can be offloaded easily. This leaves the Page class
                to do its job – validation of user requests, authentication, and template setup –
                and keeps the actual processing separate.</para>

            <para>The Action classes can be found in
                    <filename>classes/submission/[actionName]/[ActionName]Action.inc.php</filename>;
                for example, the Section Editor action class is
                    <filename>classes/submission/sectionEditor/SectionEditorAction.inc.php</filename>.</para>

            <para>The most common sorts of tasks an Action class will perform are sending emails,
                modifying database records (via the Model and DAO classes), and handling uploaded
                files (once again via the appropriate classes). Returning to the
                Model/View/Controller (MVC) architecture, Action classes perform the more
                interface-agnostic functions of the Controller component.</para>

            <para>Each of the more complex roles, such as Author, Section Editor, and Proofreader,
                has its own Action class. Another way to consider the function of an Action class is
                to look at it from a role-based perspective, ignoring the user interface: any major
                processing that an Author should be able to perform should be implemented in the
                    <code>AuthorAction</code> class. The user interface then calls these functions
                as necessary.</para>
        </sect1>
        <sect1 xml:id="classReferenceModelClasses">
            <title>Model Classes</title>

            <para>The Model classes are PHP classes responsible only for representing database
                entities in memory. For example, the <code>articles</code> table stores article
                information in the database; there is a corresponding Model class called
                    <code>Article</code> (see <filename>classes/article/Article.inc.php</filename>)
                and DAO class called <code>ArticleDAO</code> (see the section called <link
                    linkend="classReferenceDataAccessObjects">Data Access Objects [DAOs]</link>).</para>

            <para>Methods provided by Model classes are almost exclusively get/set methods to
                retrieve and store information, such as the <code>getTitle()</code> and
                    <code>setTitle($title)</code> methods of the <code>Article</code> class. Model
                classes are not responsible for database storage or updates; this is accomplished by
                the associated DAO class.</para>

            <para>All Model classes extend the <code>DataObject</code> class.</para>
        </sect1>
        <sect1 xml:id="classReferenceDataAccessObjects">
            <title>Data Access Objects (DAOs)</title>

            <para>Data Access Objects are used to retrieve data from the database in the form of
                Model classes, to update the database given a modified Model class, or to delete
                rows from the database.</para>

            <para>Each Model class has an associated Data Access Object. For example, the
                    <code>Article</code> class
                (<filename>classes/article/Article.inc.php</filename>) has an associated DAO called
                    <code>ArticleDAO</code>
                (<filename>classes/article/ArticleDAO.inc.php</filename>) that is responsible for
                implementing interactions between the Model class and its database entries.</para>

            <para>All DAOs extend the <code>DAO</code> class
                (<filename>classes/db/DAO.inc.php</filename>). All communication between PHP and the
                database back-end is implemented in DAO classes. As much as is logical and
                efficient, a given DAO should limit its interaction to the table or tables with
                which it is primarily concerned.</para>

            <para>DAOs, when used, are never instantiated directly. Instead, they are retrieved by
                name using the <code>DAORegistry</code> class, which maintains instances of the
                system's DAOs. For example, to retrieve an article DAO:</para>

            <informalexample>
                <para>
                    <code><![CDATA[$articleDao = &DAORegistry::getDAO('ArticleDAO');]]></code>
                </para>
            </informalexample>
            <para>Then, to use it to retrieve an article with the ID stored in
                <code>$articleId</code>:</para>
            <informalexample>
                <para>
                    <code><![CDATA[$article = &$articleDao->getArticle($articleId);]]></code>
                </para>
            </informalexample>
            <para>Note that many of the DAO methods that fetch a set of results will return
                subclasses of the <code>ItemIterator</code> class rather than the usual PHP array.
                This facilitates paging of lists containing many items, and can be more efficient
                than preloading all results into an array. See the discussion of Paging Classes in
                the Support Classes section.</para>
        </sect1>
        <sect1 xml:id="classReferenceSupportClasses">
            <title>Support Classes</title>
            <sect2 xml:id="classReferenceSendingEmailMessages">
                <title>Sending Email Messages</title>



                <para>The following classes, along with the <code>EmailTemplate</code> and
                        <code>MailTemplate</code> model classes and <code>EmailTemplateDAO</code>
                    DAO class, provide all email functionality used in the system: </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <filename>classes/mail/Mail.inc.php</filename>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <filename>classes/mail/MailTemplate.inc.php</filename>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <filename>classes/mail/ArticleMailTemplate.inc.php</filename>
                        </para>
                    </listitem>
                </itemizedlist>
                <para><filename>Mail.inc.php</filename> provides the basic functionality for
                    composing, addressing, and sending an email message. It is extended by the class
                        <code>MailTemplate</code> to add support for template-based messages. In
                    turn, <code>ArticleMailTemplate</code> adds features that are useful for
                    messages pertaining to a specific article, such as message logging that can be
                    viewed on a per-article basis.</para>

                <para>For a sample of typical usage and invocation code, see the various Action
                    classes, such as <code>SectionEditorAction</code>'s <code>notifyReviewer</code>
                    method. Note that since nearly all emails composed by the system must be
                    displayed to the user, who then must be able to modify it over several browser
                    request-response cycles, some complexity is necessary to maintain the system's
                    state between requests.</para>
            </sect2>
            <sect2 xml:id="classReferenceInternationalization">
                <title>Internationalization</title>

                <para>System internationalization is a critical feature for OJS 2.x; it has been
                    designed without making assumptions about the language it will be presented in.</para>

                <para>There is a primary XML document for each language of display, located in the
                        <code>locale</code> directory in a subdirectory named after the locale; for
                    example, the <code>en_US</code> locale information is located in the
                        <filename>locale/en_US/locale.xml</filename> file.</para>

                <para>This file contains a number of locale strings used by the User Interface
                    (nearly all directly from the Smarty templates, although some strings are coded
                    in the Page classes, for example).</para>

                <para>These are invoked by Smarty templates with the <code>{translate
                        key="[keyName]"}</code> directive (see the section titled User Interface for
                    more information). Variable replacement is supported.</para>

                <para>The system's locales are configured, installed and managed on the Languages
                    page, available from Site Settings. The available locales list is assembled from
                    the registry file <filename>registry/locales.xml</filename>.</para>

                <para>In addition to the language-dependent <filename>locale.xml</filename> file,
                    locale-specific data can be found in subdirectories of the
                        <filename>dbscripts/xml/data/locale</filename> and
                    <filename>registry/locale</filename> directories, once again named after the
                    locale. For example, the XML file
                        <filename>dbscripts/xml/data/locale/en_US/email_templates_data.xml</filename>
                    contains all email template text for the <code>en_US</code> (United States
                    English) locale.</para>

                <para>All XML data uses UTF-8 encoding and as long as the back-end database is
                    configured to properly handle special characters, they will be stored and
                    displayed as entered.</para>
                <!-- UPDDATEME -->
                <para>OJS 2.x has limited support for simultaneous multiple locales for a single
                    journal. For example, articles have a primary locale; however, titles and
                    abstracts can have up to two additional locales.</para>

                <para>Internationalization functions are provided by
                        <filename>classes/i18n/Locale.inc.php</filename>. See also
                        <filename>classes/template/TemplateManager.inc.php</filename> (part of the
                    User Interface's support classes) for the implementation of template-based
                    locale translation functions.</para>
            </sect2>
            <sect2 xml:id="classReferenceForms">
                <title>Forms</title>

                <para>The Forms class (<filename>classes/form/Form.inc.php</filename>) and its
                    various subclasses, such as
                    <filename>classes/manager/form/SectionForm.inc.php</filename>, which is used by
                    a Journal Manager to modify a Section, centralize the implementation of common
                    tasks related to form processing such as validation and error handling.</para>

                <para>Subclasses of the <code>Form</code> class override the constructor,
                        <code>initData</code>, <code>display</code>, <code>readInputData</code>, and
                        <code>execute</code> methods to define the specific form being implemented.
                    The role of each function is described below:</para>


                <itemizedlist>
                    <listitem>
                        <para>Class constructor: Initialize any variables specific to this form.
                            This is useful, for example, if a form is related to a specific Article;
                            an <code>Article</code> object or article ID can be required as a
                            parameter to the constructor and kept as a member variable.</para>
                    </listitem>
                    <listitem>
                        <para><code>initData</code>: Before the form is displayed, current or
                            default values (if any) must be loaded into the <code>_data</code> array
                            (a member variable) so the form class can display them.</para>
                    </listitem>
                    <listitem>
                        <para><code>display</code>: Just before a form is displayed, it may be
                            useful to assign additional parameters to the form's Smarty template in
                            order to display additional information. This method is overridden in
                            order to perform such assignments.</para>
                    </listitem>
                    <listitem>
                        <para><code>readInputData</code>: This method is overridden to instruct the
                            parent class which form parameters must be used by this form.
                            Additionally, tasks like validation can be performed here.</para>
                    </listitem>
                    <listitem>
                        <para><code>execute</code>: This method is called when a form's data is to
                            be “committed." This method is responsible, for example, for updating an
                            existing database record or inserting a new one(via the appropriate
                            Model and DAO classes).</para>
                    </listitem>
                </itemizedlist>


                <para>The best way to gain understanding of the various Form classes is to view a
                    typical example such as the <code>SectionForm</code> class from the example
                    above (implemented in
                    <filename>classes/manager/form/SectionForm.inc.php</filename>). For a more
                    complex set of examples, see the various Journal Manager's Setup forms (in the
                        <filename>classes/manager/form/setup</filename> directory).</para>

                <para>It is not convenient or logical for all form interaction between the browser
                    and the system to be performed using the <code>Form</code> class and its
                    subclasses; generally speaking, this approach is only useful when a page closely
                    corresponds to a database record. For example, the page defined by the
                        <code>SectionForm</code> class closely corresponds to the layout of the
                        <code>sections</code> database table.</para>
            </sect2>
            <sect2 xml:id="classReferenceConfiguration">
                <title>Configuration</title>

                <para>Most of OJS 2.x's settings are stored in the database, particularly journal
                    settings in the <code>journal_settings</code> table, and are accessed via the
                    appropriate DAOs and Model classes. However, certain system-wide settings are
                    stored in a flat file called <filename>config.inc.php</filename> (which is not
                    actually a PHP script, but is so named to ensure that it is not exposed to
                    remote browsers).</para>

                <para>This configuration file is parsed by the ConfigParser class
                        (<filename>classes/config/ConfigParser.inc.php</filename>) and stored in an
                    instance of the Config class
                    (<filename>classes/config/Config.inc.php</filename>).</para>
            </sect2>
            <sect2 xml:id="classReferenceCoreClasses">
                <title>Core Classes</title>

                <para>The Core classes (in the <filename>classes/core</filename> directory) provide
                    fundamentally important functions and several of the classes upon which much of
                    the functionality of OJS 2.x is based. They are simple in and of themselves,
                    with flexibility being provided through their extension.</para>


                <itemizedlist>
                    <listitem>
                        <para><filename>Core.inc.php</filename>: Provides miscellaneous system-wide
                            functions</para>
                    </listitem>
                    <listitem>
                        <para><filename>DataObject.inc.php</filename>: All Model classes extend this
                            class</para>
                    </listitem>
                    <listitem>
                        <para><filename>Handler.inc.php</filename>: All Page classes extend this
                            class</para>
                    </listitem>
                    <listitem>
                        <para><filename>Registry.inc.php</filename>: Provides a system-wide facility
                            for global values, such as system startup time, to be stored and
                            retrieved</para>
                    </listitem>
                    <listitem>
                        <para><filename>Request.inc.php</filename>: Provides a wrapper around HTTP
                            requests, and provides related commonly-used functions</para>
                    </listitem>
                    <listitem>
                        <para><filename>String.inc.php</filename>: Provides locale-independent
                            string-manipulation functions and related commonly-used functions</para>
                    </listitem>
                </itemizedlist>


                <para>In particular, the Request class (defined in
                        <filename>classes/core/Request.inc.php</filename>) contains a number of
                    functions to obtain information about the remote user and build responses. All
                    URLs generated by OJS to link into itself are built using the
                    <code>Request::url</code> function; likewise, all redirects into OJS are built
                    using the <code>Request::redirect</code> function.</para>
            </sect2>
            <sect2 xml:id="classReferenceDatabaseSupport">
                <title>Database Support</title>

                <para>The basic database functionality is provided by the ADODB library (<link
                        xlink:href="http://adodb.sourceforge.net/"
                    >http://adodb.sourceforge.net</link>); atop the ADODB library is an additional
                    layer of abstraction provided by the Data Access Objects (DAOs). These make use
                    of a few base classes in the <filename>classes/db</filename> directory that are
                    extended to provide specific functionality.</para>


                <itemizedlist>
                    <listitem>
                        <para><filename>DAORegistry.inc.php</filename>: This implements a central
                            registry of Data Access Objects; when a DAO is desired, it is fetched
                            through the DAO registry.</para>
                    </listitem>
                    <listitem>
                        <para><filename>DBConnection.inc.php</filename>: All database connections
                            are established via this class.</para>
                    </listitem>
                    <listitem>
                        <para><filename>DAO.inc.php</filename>: This provides a base class for all
                            DAOs to extend. It provides functions for accessing the database via the
                                <code>DBConnection</code> class.</para>
                    </listitem>
                </itemizedlist>


                <para>In addition, there are several classes that assist with XML parsing and
                    loading into the database:</para>

                <itemizedlist>
                    <listitem>
                        <para><filename>XMLDAO.inc.php</filename>: Provides operations for
                            retrieving and modifying objects from an XML data source</para>
                    </listitem>
                    <listitem>
                        <para><filename>DBDataXMLParser.inc.php</filename>: Parses an XML schema
                            into SQL statements</para>
                    </listitem>
                </itemizedlist>

            </sect2>
            <sect2 xml:id="classReferenceFileManagement">
                <title>File Management</title>

                <para>As files (e.g. galleys and journal logos) are stored on the server filesystem,
                    rather than in the database, several classes are needed to manage this
                    filesystem and interactions between the filesystem and the rest of the OJS.
                    These classes can be found in the <filename>classes/file</filename> directory.</para>


                <itemizedlist>
                    <listitem>
                        <para><filename>FileManager.inc.php</filename>: The three subsequent file
                            management classes extend this class. It provides the necessary basic
                            functionality for interactions between the web server and the file
                            system.</para>
                    </listitem>
                    <listitem>
                        <para><filename>FileWrapper.inc.php</filename>: This implements a wrapper
                            around file access functions that is more broadly compatible than the
                            built-in access methods.</para>
                    </listitem>
                    <listitem>
                        <para><filename>ArticleFileManager.inc.php</filename>: This extends
                                <code>FileManager</code> by adding features required to manage files
                            associated with a particular article. For example, it is responsible for
                            managing the directory structure associated with article files. See also
                                <code>ArticleFile</code> and <code>ArticleFileDAO</code>.</para>
                    </listitem>
                    <listitem>
                        <para><filename>PublicFileManager.inc.php</filename>: Many files, such as
                            journal logos, are “public" in that they can be accessed by anyone
                            without need for authentication. These files are managed by this class,
                            which extends the <code>FileManager</code> class.</para>
                    </listitem>
                    <listitem>
                        <para><filename>TemporaryFileManager.inc.php</filename>: This class allows
                            the system to store temporary files associated with a particular user so
                            that they can be maintained across requests. For example, if a user is
                            composing an email with an attachment, the attachment must be stored on
                            the server until the user is finished composing; this may involve
                            multiple requests. <code>TemporaryFileManager</code> also extends
                                <code>FileManager</code>. See also <code>TemporaryFile</code> and
                                <code>TemporaryFileDAO</code>.</para>
                    </listitem>
                </itemizedlist>

            </sect2>
            <sect2 xml:id="classReferenceScheduledTasks">
                <title>Scheduled Tasks</title>

                <para>OJS 2.x is capable of performing regularly-scheduled automated tasks with the
                    help of the operating system, which is responsible for launching the
                        <filename>tools/runScheduledTasks.php</filename> script via a mechanism like
                    UNIX's <command>cron</command>. Scheduled tasks must be enabled in the
                        <filename>config.inc.php</filename> configuration file and the journal's
                    settings.</para>

                <para>Automated tasks are configured in
                    <filename>registry/scheduledTasks.xml</filename> and information like the date
                    of a task's last execution is stored in the <code>scheduled_tasks</code>
                    database table.</para>

                <para>The <code>ScheduledTask</code> model class and the associated
                        <code>ScheduledTaskDAO</code> are responsible for managing these database
                    entries. In addition, the scheduled tasks themselves are implemented in the
                        <filename>classes/tasks</filename> directory. Currently, only the
                        <code>ReviewReminder</code> task is implemented, which is responsible for
                    reminding reviewers that they have an outstanding review to complete or indicate
                    acceptance of.</para>

                <para>These tasks, which extend the <code>ScheduledTask</code> model class and are
                    launched by the <code>runScheduledTasks</code> tool, must implement the
                        <code>execute()</code> method with the task to be performed.</para>
            </sect2>
            <sect2 xml:id="classReferenceSecurity">
                <title>Security</title>

                <para>The OJS 2.x security model is based on the concept of roles. The system's
                    roles are predefined (e.g. author, reader, section editor, proofreader, etc) and
                    users are assigned to roles on a per-journal basis. A user can have multiple
                    roles within the same journal.</para>

                <para>Roles are managed via the <code>Role</code> model class and associated
                        <code>RoleDAO</code>, which manage the roles database table and provide
                    security checking.</para>

                <para>The <code>Validation</code> class
                        (<filename>classes/security/Validation.inc.php</filename>) is responsible
                    for ensuring security in interactions between the client browser and the web
                    server. It handles login and logout requests, generates password hashes, and
                    provides many useful shortcut functions for security- and validation-related
                    issues. The <code>Validation</code> class is the preferred means of access for
                    these features.</para>
            </sect2>
            <sect2 xml:id="classReferenceSessionManagement">
                <title>Session Management</title>

                <para>Session management is provided by the <code>Session</code> model class,
                        <code>SessionDAO</code>, and the <code>SessionManager</code> class
                        (<filename>classes/session/SessionManager.inc.php</filename>).</para>

                <para>While <code>Session</code> and <code>SessionDAO</code> manage
                    database-persistent sessions for individual users, <code>SessionManager</code>
                    is concerned with the technical specifics of sessions as implemented for PHP and
                    Apache.</para>
            </sect2>
            <sect2 xml:id="classReferenceTemplateSupport">
                <title>Template Support</title>

                <para>Smarty templates (<link xlink:href="http://smarty.net/"
                        >http://smarty.net</link>) are accessed and managed via the
                        <code>TemplateManager</code> class
                        (<filename>classes/template/TemplateManager.inc.php</filename>), which
                    performs numerous common tasks such as registering additional Smarty functions
                    such as {translate ...}, which is used for localization, and setting up
                    commonly-used template variables such as URLs and date formats.</para>
            </sect2>
            <sect2 xml:id="classReferencePagingClasses">
                <title>Paging Classes</title>

                <para>Several classes facilitate the paged display of lists of items, such as
                    submissions:</para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <code>ItemIterator</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>ArrayItemIterator</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>DAOResultFactory</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>DBRowIterator</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>VirtualArrayIterator</code>
                        </para>
                    </listitem>
                </itemizedlist>
                <para>The <code>ItemIterator</code> class is an abstract iterator, for which
                    specific implementations are provided by the other classes. All DAO classes
                    returning subclasses of <code>ItemIterator</code> should be treated as though
                    they were returning <code>ItemIterator</code>s.</para>

                <para>Each iterator represents a single “page" of results. For example, when
                    fetching a list of submissions from <code>SectionEditorSubmissionDAO</code>, a
                    range of desired row numbers can be supplied; the <code>ItemIterator</code>
                    returned (specifically an <code>ArrayIterator</code>) contains information about
                    that range.</para>

                <para><code>ArrayItemIterator</code> and <code>VirtualArrayIterator</code> provide
                    support for iterating through PHP arrays; in the case of
                        <code>VirtualArrayIterator</code>, only the desired page's entries need be
                    supplied, while <code>ArrayItemIterator</code> will take the entire set of
                    results as a parameter and iterate through only those entries on the current
                    page.</para>

                <para><code>DAOResultFactory</code>, the most commonly used and preferred
                        <code>ItemIterator</code> subclass, takes care of instantiating Model
                    objects corresponding to the results using a supplied DAO and instantiation
                    method.</para>

                <para><code>DBRowIterator</code> is an <code>ItemIterator</code> wrapper around the
                    ADODB result structure.</para>
            </sect2>
            <sect2 xml:id="classReferencePlugins">
                <title>Plugins</title>

                <para>There are several classes included with the OJS 2.x distribution to help
                    support a plugin registry. For information on the plugin registry, see the <link
                        linkend="plugins">Plugins</link> section.</para>
            </sect2>
        </sect1>
        <sect1 xml:id="classReferenceCommonTasks">
            <title>Common Tasks</title>

            <para>The following sections contain code samples and further description of how the
                various classes interact.</para>
            <sect2 xml:id="classReferenceSendingEmails">
                <title>Sending Emails</title>

                <para>Emails templates for each locale are stored in an XML file called
                        <filename>dbscripts/xml/data/locale/[localeName]/email_templates_data.xml</filename>.
                    Each email has an identifier (called <code>email_key</code> in the XML file)
                    such as <code>SUBMISSION_ACK</code>. This identifier is used in the PHP code to
                    retrieve a particular email template, including body text and subject.</para>

                <para>The following code retrieves and sends the <code>SUBMISSION_ACK</code> email,
                    which is sent to authors as an acknowledgment when they complete a submission.
                    (This snippet assumes that the current article ID is stored in
                    <code>$articleId</code>.)</para>

                <example xml:id="sendingSUBMISSION_ACK">
                    <title>Example Code to Send a SUBMISSION_ACK Email</title>
<programlisting><![CDATA[// Fetch the article object using the article DAO.
$articleDao = &DAORegistry::getDAO('ArticleDAO');
$article = &$articleDao->getArticle($articleId);

// Load the required ArticleMailTemplate class
import('mail.ArticleMailTemplate');

// Retrieve the mail template by name.
$mail = &new ArticleMailTemplate($article, 'SUBMISSION_ACK');

if ($mail->isEnabled()) {
// Get the current user object and assign them as the recipient of this message.
$user = &Request::getUser();
$mail->addRecipient($user->getEmail(),
    $user->getFullName());

// Get the current journal object.
$journal = &Request::getJournal();

// This template contains variable names of the form {$variableName} that need to
// be replaced with the appropriate values. Note that while the syntax is similar
// to that used by Smarty templates, email templates are not Smarty templates. Only
// direct variable replacement is supported.
$mail->assignParams(array(
    'authorName' => $user->getFullName(),
    'authorUsername' => $user->getUsername(),
    'editorialContactSignature' => $journal->getSetting('contactName') .
        "\n" . $journal->getTitle(),
    'submissionUrl' => Request::getPageUrl() . 
        '/author/submission/' . $article->getArticleId()
));

$mail->send();
}]]></programlisting>
                </example>
            </sect2>
            <sect2 xml:id="classReferenceDatabaseInteractionWithDaos">
                <title>Database Interaction with DAOs</title>

                <para>The following code snippet retrieves an article object using the article ID
                    supplied in the <code>$articleId</code> variable, changes the title, and updates
                    the database with the new values.</para>
                <example xml:id="retrieveArticleObject">
                    <title>Retrieving an Article Object</title>

<programlisting><![CDATA[// Fetch the article object using the article DAO.
$articleDao = &DAORegistry::getDAO('ArticleDAO');
$article = &$articleDao->getArticle($articleId);

$article->setTitle('This is the new article title.');

// Update the database with the modified information.
$articleDao->updateArticle($article);]]></programlisting>
                </example>
                <para>Similarly, the following snippet deletes an article from the database.</para>

                <example xml:id="deleteArticleObject">
                    <title>Deleting an Article Object</title>
<programlisting><![CDATA[// Fetch the article object using the article DAO.
$articleDao = &DAORegistry::getDAO('ArticleDAO');
$article = &$articleDao->getArticle($articleId);

// Delete the article from the database.
$articleDao->deleteArticle($article);]]></programlisting>
                </example>

                <para>The previous task could be accomplished much more efficiently with the
                    following:</para>

                <example xml:id="deleteArticleObjectEfficiently">
                    <title>Deleting an Article Object More Efficiently</title>
<programlisting><![CDATA[// Delete the article using the article DAO.
$articleDao = &DAORegistry::getDAO('ArticleDAO');
$articleDao->deleteArticleById($articleId);]]></programlisting>
                </example>
                <para>Generally speaking, the DAOs are responsible for deleting dependent database
                    entries. For example, deleting an article will delete that article's authors
                    from the database. Note that this is accomplished in PHP code rather than
                    database triggers or other database-level integrity functionality in order to
                    keep database requirements as low as possible.</para>
            </sect2>
        </sect1>
    </chapter>
    <chapter xml:id="userInterface">
        <title>User Interface</title>

        <para>The User Interface is implemented as a large set of Smarty templates, which are called
            from the various Page classes. (See the section titled “Request Handling".)</para>

        <para>These templates are responsible for the HTML markup of each page; however, all content
            is provided either by template variables (such as article titles) or through
            locale-specific translations using a custom Smarty function.</para>

        <para>You should be familiar with Smarty templates before working with OJS 2.x templates.
            Smarty documentation is available from <link xlink:href="http://smarty.php.net/"
                >http://smarty.php.net</link>.</para>
        <sect1 xml:id="userInterfaceVariables">
            <title>Variables</title>

            <para>Template variables are generally assigned in the Page or Form class that calls the
                template. In addition, however, many variables are assigned by the TemplateManager
                class and are available to all templates:</para>

            <itemizedlist>
                <listitem>
                    <para><code>defaultCharset</code>: the value of the
                        “<code>client_charset</code>" setting from the [i18n] section of the
                            <filename>config.inc.php</filename> configuration file</para>
                </listitem>
                <listitem>
                    <para><code>currentLocale</code>: The symbolic name of the current locale</para>
                </listitem>
                <listitem>
                    <para><code>baseUrl</code>: Base URL of the site, e.g. <link
                            xlink:href="http://www.mylibrary.com/">http://www.mylibrary.com</link>
                    </para>
                </listitem>
                <listitem>
                    <para><code>requestedPage</code>: The symbolic name of the requested page</para>
                </listitem>
                <listitem>
                    <para><code>pageTitle</code>: Default name of locale key of page title; this
                        should be replaced with a more appropriate setting in the template</para>
                </listitem>
                <listitem>
                    <para><code>siteTitle</code>: If the user is currently browsing a page
                        associated with a journal, this is the journal title; otherwise the site
                        title from Site Configuration</para>
                </listitem>
                <listitem>
                    <para><code>publicFilesDir</code>: The URL to the currently applicable Public
                        Files directory (See the section titled File Management)</para>
                </listitem>
                <listitem>
                    <para><code>pagePath</code>: Path of the requested page and operation, if
                        applicable, prepended with a slash; e.g.
                    <filename>/user/profile</filename></para>
                </listitem>
                <listitem>
                    <para><code>currentUrl</code>: The full URL of the current page</para>
                </listitem>
                <listitem>
                    <para><code>dateFormatTrunc</code>: The value of the
                        <code>date_format_trunc</code> parameter in the <code>[general]</code>
                        section of the <filename>config.inc.php</filename> configuration file; used
                        with the <code>date_format</code> Smarty function</para>
                </listitem>
                <listitem>
                    <para><code>dateFormatShort</code>: The value of the
                        <code>date_format_short</code> parameter in the <code>[general]</code>
                        section of the <filename>config.inc.php</filename> configuration file; used
                        with the date_format Smarty function</para>
                </listitem>
                <listitem>
                    <para><code>dateFormatLong</code>: The value of the
                        <code>date_format_long</code> parameter in the <code>[general]</code>
                        section of the <filename>config.inc.php</filename> configuration file; used
                        with the <code>date_format</code> Smarty function</para>
                </listitem>
                <listitem>
                    <para><code>datetimeFormatShort</code>: The value of the
                            <code>datetime_format_short</code> parameter in the
                        <code>[general]</code> section of the <filename>config.inc.php</filename>
                        configuration file; used with the <code>date_format</code> Smarty
                    function</para>
                </listitem>
                <listitem>
                    <para><code>datetimeFormatLong</code>: The value of the
                            <code>datetime_format_long</code> parameter in the
                        <code>[general]</code> section of the <filename>config.inc.php</filename>
                        configuration file; used with the <code>date_format</code> Smarty
                    function</para>
                </listitem>
                <listitem>
                    <para><code>currentLocale</code>: The name of the currently applicable locale;
                        e.g. <code>en_US</code></para>
                </listitem>
                <listitem>
                    <para><code>articleSearchByOptions</code>: Names of searchable fields used by
                        the search feature in the sidebar and on the Search page</para>
                </listitem>
                <listitem>
                    <para><code>userSession</code>: The current Session object</para>
                </listitem>
                <listitem>
                    <para><code>isUserLoggedIn</code>: Boolean indicating whether or not the user is
                        logged in</para>
                </listitem>
                <listitem>
                    <para><code>loggedInUsername</code>: The current user's username, if
                    applicable</para>
                </listitem>
                <listitem>
                    <para><code>page_links</code>: The maximum number of page links to be displayed
                        for a paged list within the current Journal or site context.</para>
                </listitem>
                <listitem>
                    <para><code>items_per_page</code>: The maximum number of items to display per
                        page of a paged list within the current Journal or site context.</para>
                </listitem>
            </itemizedlist>

            <para>Additionally, if the user is browsing pages belonging to a particular journal, the
                following variables are available:</para>
            <itemizedlist>
                <listitem>
                    <para><code>currentJournal</code>: The currently-applicable journal object (of
                        the <code>Journal</code> class)</para>
                </listitem>
                <listitem>
                    <para><code>alternateLocale1</code>: First alternate locale
                            (<code>alternateLocale2</code>) journal setting</para>
                </listitem>
                <listitem>
                    <para><code>alternateLocale2</code>: Second alternate locale
                            (<code>alternateLocale1</code>) journal setting</para>
                </listitem>
                <listitem>
                    <para><code>navMenuItems</code>: Navigation items (<code>navItems</code>)
                        journal setting</para>
                </listitem>
                <listitem>
                    <para><code>pageHeaderTitle</code>: Used by
                            <filename>templates/common/header.tpl</filename> to display
                        journal-specific information</para>
                </listitem>
                <listitem>
                    <para><code>pageHeaderLogo</code>: Used by
                        <filename>templates/common/header.tpl</filename> to display journal-specific
                        information</para>
                </listitem>
                <listitem>
                    <para><code>alternatePageHeader</code>: Used by
                            <filename>templates/common/header.tpl</filename> to display
                        journal-specific information</para>
                </listitem>
                <listitem>
                    <para><code>metaSearchDescription</code>: Current journal's description; used in
                            <code>meta</code> tags</para>
                </listitem>
                <listitem>
                    <para><code>metaSearchKeywords</code>: Current journal's keywords; used in
                            <code>meta</code> tags</para>
                </listitem>
                <listitem>
                    <para><code>metaCustomHeaders</code>: Current journal's custom headers, if
                        defined; used in <code>meta</code> tags</para>
                </listitem>
                <listitem>
                    <para><code>stylesheets</code>: An array of stylesheets to include with the
                        template</para>
                </listitem>
                <listitem>
                    <para><code>pageFooter</code>: Custom footer content to be displayed at the end
                        of the page</para>
                </listitem>
            </itemizedlist>

            <para>If multiple languages are enabled, the following variables are set:</para>

            <itemizedlist>
                <listitem>
                    <para><code>enableLanguageToggle</code>: Set to <code>true</code> when this
                        feature is enabled</para>
                </listitem>
                <listitem>
                    <para><code>languageToggleLocales</code>: Array of selectable locales</para>
                </listitem>
            </itemizedlist>

        </sect1>
        <sect1 xml:id="userInterfaceFunctionsAndModifiers">
            <title>Functions &amp; Modifiers</title>

            <para>A number of functions have been added to Smarty's built-in template functions to
                assist in common tasks such as localization.</para>


            <itemizedlist>
                <listitem>
                    <para><code>translate</code> (e.g. <code>{translate key="my.locale.key"
                            myVar="value"}</code>): This function provides a locale-specific
                        translation. (See the <link linkend="classReferenceInternationalization"
                            >Internationalization</link> section.) Variable replacement is possible
                        using Smarty-style syntax; using the above example, if the
                            <filename>locale.xml</filename> file contains:</para>

                    <informalexample>
<programlisting><![CDATA[<message key="my.locale.key">myVar equals “{$myVar}".</message>]]></programlisting>
                    </informalexample>

                    <para>The resulting output will be:</para>
                    <informalexample>
<programlisting><![CDATA[myVar equals “value".]]></programlisting>
                    </informalexample>
                    <para>(Note that only direct variable replacements are allowed in locale files.
                        You cannot call methods on objects or Smarty functions.)</para>
                </listitem>
                <listitem>
                    <para><code>assign</code> (e.g. <code>{translate|assign:"myVar"
                            key="my.locale.key"}</code>): Assign a value to a template variable.
                        This example is similar to<code> {translate ...}</code>, except that the
                        result is assigned to the specified Smarty variable rather than being
                        displayed to the browser.</para>
                </listitem>
                <listitem>
                    <para><code>html_options_translate</code> (e.g. <code>{html_options_translate
                            values=$myValuesArray selected=$selectedOption}</code>): Convert an
                        array of the form</para>

                    <informalexample>
<programlisting><![CDATA[array('optionVal1' => 'locale.key.option1', 'optionVal2' => 'locale.key.option2')]]></programlisting>
                    </informalexample>

                    <para>to a set of HTML <code><![CDATA[<option>...</option>]]></code> tags of the
                        form</para>
                    <informalexample>
<programlisting><![CDATA[<option value="optionVal1">Translation of “locale.key.option1" here</option>
<option value="optionVal2">Translation of “locale.key.option2" here</option>]]></programlisting>
                    </informalexample>
                    <para/>

                    <para>for use in a Select menu.</para>
                </listitem>
                <listitem>
                    <para><code>get_help_id</code> (e.g. <code>{get_help_id key="myHelpTopic"
                            url="true"}</code>): Displays the topic ID or a full URL (depending on
                        the value of the url parameter) to the specific help page named.</para>
                </listitem>
                <listitem>
                    <para><code>icon</code> (e.g. <code>{icon name="mail" alt="..."
                            url="http://link.url.com" disabled="true"}</code>): Displays an icon
                        with the specified link URL, disabled or enabled as specified. The
                            <code>name</code> parameter can take on the values <code>comment</code>,
                            <code>delete</code>, <code>edit</code>, <code>letter</code>,
                        <code>mail</code>, or <code>view</code>.</para>
                </listitem>
                <listitem>
                    <para><code>help_topic</code> (e.g. <code>{help_topic key="(dir)*.page.topic"
                            text="foo"}</code>): Displays a link to the specified help topic, with
                        the <code>text</code> parameter defining the link contents.</para>
                </listitem>
                <listitem>
                    <para><code>page_links</code>: (e.g. <code>{page_links
                        iterator=$submissions}</code>): Displays the page links for the paged list
                        associated with the <code>ItemIterator</code> subclass (in this example,
                            <code>$submissions</code>).</para>
                </listitem>
                <listitem>
                    <para><code>page_info</code>: (e.g. <code>{$page_info name="submissions"
                            iterator=$submissions}</code>): Displays the page information (e.g. page
                        number and total page count) for the paged list associated with the
                            <code>ItemIterator</code> subclass (in this case,
                        <code>$submissions</code>).</para>
                </listitem>
                <listitem>
                    <para><code>iterate</code>: (e.g. <code>{$iterate from=submissions
                            item=submission}</code>): Iterate through items in the specified
                            <code>ItemIterator</code> subclass, with each item stored as a smarty
                        variable with the supplied name. (This example iterates through items in the
                            <code>$submissions</code> iterator, which each item stored as a template
                        variable named <code>$submission</code>.) Note that there are no
                        dollar-signs preceding the variable names -- the specified parameters are
                        variable names, not variables themselves.</para>
                </listitem>
                <listitem>
                    <para><code>strip_unsafe_html</code>: (e.g.
                        <code>{$myVar|strip_unsafe_html}</code>): Remove HTML tags and attributes
                        deemed as “unsafe" for general use. This modifier allows certain simple HTML
                        tags to be passed through to the remote browser, but cleans anything
                        advanced that may be used for XSS-based attacks.</para>
                </listitem>
                <listitem>
                    <para><code>call_hook</code>: (e.g. <code>{call_hook
                            name="Templates::Manager::Index::ManagementPages"}</code>) Call a plugin
                        hook by name. Any plugins registered against the named hook will be
                    called.</para>
                </listitem>
            </itemizedlist>

            <para>There are many examples of use of each of these functions in the templates
                provided with OJS 2.x.</para>
        </sect1>
    </chapter>
    <chapter xml:id="plugins">
        <title>Plugins</title>

        <para>OJS 2.1 contains a full-fledged plugin infrastructure that provides developers with
            several mechanisms to extend and modify the system's behavior without modifying the
            codebase. The key concepts involved in this infrastructure are <emphasis role="strong"
                >categories</emphasis>, <emphasis role="strong">plugins</emphasis>, and <emphasis
                role="strong">hooks</emphasis>.</para>

        <para>A <emphasis role="strong">plugin</emphasis> is a self-contained collection of code and
            resources that implements an extension of or modification to OJS. When placed in the
            appropriate directory within the OJS codebase, it is loaded and called automatically
            depending on the <emphasis role="strong">category</emphasis> it is part of.</para>

        <para>Each plugin belongs to a single <emphasis role="strong">category</emphasis>, which
            defines its behavior. For example, plugins in the <code>importexport</code> category
            (which are used to import or export OJS data) are loaded when the Journal Manager uses
            the “Import/Export Data" interface or when the command-line tool is launched.
            Import/export plugins must implement certain methods which are used for delegation of
            control between the plugin and OJS.</para>

        <para>Plugins are loaded when the category they reside in is requested; for example,
                <code>importexport</code> plugins are loaded by the Page class
                <code>ImportExportHandler</code> (implemented in the file
                <filename>pages/manager/ImportExportHandler.inc.php</filename>). Requests are
            delegated to these plugins via the methods defined in the
            <code>ImportExportPlugin</code> class, which each plugin in this category extends.</para>

        <para><emphasis role="strong">Hooks</emphasis> are used by plugins as a notification tool
            and to override behaviors built into OJS. At many points in the execution of OJS code, a
            hook will be called by name – for example, <code>LoadHandler</code> in
                <filename>index.php</filename>. Any plugins that have been loaded and registered
            against that hook will have a chance to execute code to alter the default behavior of
            OJS around the point at which that hook was called.</para>

        <para>While most of the plugin categories built into OJS define specific tasks like
            authorization and harvesting tasks, there is a <code>generic</code> category for plugins
            that do not suit any of the other categories. These are more complicated to write but
            offer much more flexibility in the types of alterations they can make to OJS. Hooks are
            generally intended for use with plugins in this category.</para>
        <sect1 xml:id="pluginsObjectsAndClasses">
            <title>Objects &amp; Classes</title>

            <para>Plugins in OJS 2.x are object-oriented. Each plugin extends a class defining its
                category's functions and is responsible for implementing them.</para>

            <table frame="all" xml:id="pluginsTable">
                <title>Plugins</title>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>
                                <para>Category</para>
                            </entry>
                            <entry>
                                <para>Base Class</para>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <para>
                                    <code>generic</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code>GenericPlugin</code>
                                        (<filename>classes/&#x200b;plugins/&#x200b;GenericPlugin.inc.php</filename>)</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>importexport</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code>ImportExportPlugin</code>
                                        (<filename>classes/&#x200b;plugins/&#x200b;ImportExportPlugin.inc.php</filename>)</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>auth</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code>AuthPlugin</code>
                                        (<filename>classes/&#x200b;plugins/&#x200b;AuthPlugin.inc.php</filename>)</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>gateways</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code>GatewayPlugin</code>
                                        (<filename>classes/&#x200b;plugins/&#x200b;GatewayPlugin.inc.php</filename>)</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>Each base class contains a description of the functions that must be implemented
                by plugins in that category.</para>

            <para>Plugins are managed by the <code>PluginRegistry</code> class (implemented in
                    <filename>classes/plugins/PluginRegistry.inc.php</filename>). They can register
                hooks by using the <code>HookRegistry</code> class (implemented in
                    <filename>classes/plugins/HookRegistry.inc.php</filename>).</para>
        </sect1>
        <sect1 xml:id="pluginsSamplePlugin">
            <title>Sample Plugin</title>

            <para>The following code listings illustrate a basic sample plugin for the
                <code>generic</code> plugin category. This plugin can be installed by placing all of
                its files in a directory called <filename>plugins/generic/example</filename>.</para>

            <para>This plugin will add an entry to the Journal Manager's list of functions,
                available by following the “Journal Manager" link from User Home.</para>
            <sect2 xml:id="pluginsLoaderStub">
                <title>Loader Stub</title>

                <para>The plugin is loaded by OJS by loading a file in the plugin directory called
                        <filename>index.php</filename>. This is a loader stub responsible for
                    instantiating and returning the plugin object:</para>

                <example xml:id="pluginsExampleLoaderStub">
                    <title>Plugin Loader Stub</title>
<programlisting><![CDATA[<?php
require_once('ExamplePlugin.inc.php');
return new ExamplePlugin();
?>]]></programlisting>
                </example>
            </sect2>
            <sect2 xml:id="pluginsPluginObject">
                <title>Plugin Object</title>

                <para>The plugin object encapsulates the plugin and generally will do most of the
                    work. In this case, since this plugin will be in the generic category, the
                    object must extend the GenericPlugin class:</para>

                <example xml:id="pluginsExamplePluginObject">
                    <title>Plugin Object</title>
<programlisting><![CDATA[
<?php 
import('classes.plugins.GenericPlugin'); 
class ExamplePlugin extends GenericPlugin { 
    function register($category, $path) { 
        if (parent::register($category, $path)) { 
            HookRegistry::register( 
                'Templates::Manager::Index::ManagementPages', 
                array(&$this, 'callback') 
            ); 
            return true; 
        } 
        return false; 
    } 
    function getName() { 
        return 'ExamplePlugin'; 
    } 
    function getDisplayName() { 
        return 'Example Plugin'; 
    } 
    function getDescription() { 
        return 'A description of this plugin'; 
    } 
    function callback($hookName, $args) { 
        $params =& $args[0]; 
        $smarty =& $args[1]; 
        $output =& $args[2]; 
        $output = '<li>&#187; <a href=”http://pkp.sfu.ca”>My New Link</a></li>'; 
        return false; 
    } 
} 
?>]]></programlisting>
                </example>



                <para>The above code illustrates a few of the most important parts of plugins: the
                        <code>register</code> function, hook registration and callback, and plugin
                    management.</para>
            </sect2>
            <sect2 xml:id="pluginsRegistrationFunction">
                <title>Registration Function</title>

                <para>Whenever OJS loads and registers a plugin, the plugin's
                    <code>register(...)</code> function will be called. This is an opportunity for
                    the plugin to register against any hooks it needs, load configuration,
                    initialize data structures, etc. In the above example, all the plugin needs to
                    do (aside from calling the parent class's <code>register</code> function) is
                    register against the <code>Templates::Manager::Index::ManagementPages</code>
                    hook. </para>

                <para>Another common task to perform in the registration function is loading locale
                    data. Locale data should be included in subdirectories of the plugin's directory
                    called <filename>locale/[localeName]/locale.xml</filename>, where
                        <filename>[localeName]</filename> is the standard symbolic name of the
                    locale, such as <code>en_US</code> for US English. In order for these data files
                    to be loaded, plugins should call <code>$this->addLocaleData();</code> in the
                    registration function after calling the parent registration function.</para>
            </sect2>
            <sect2 xml:id="pluginsHookRegistrationAndCallback">
                <title>Hook Registration and Callback</title>

                <para>The above example serves as a clear illustration of hook registration and
                    callback; along with the list of hooks below, this should provide all the
                    required information for extending OJS using hooks. However, there are a few
                    important details that need further examination.</para>

                <para>The process by which a plugin registers against a hook is as follows:</para>
                <example xml:id="pluginsExampleHookRegistration">
                    <title>Hook Registration Process</title>
<programlisting><![CDATA[HookRegistry::register(
    'Templates::Manager::Index::ManagementPages',
    array(&$this, 'callback')
);]]></programlisting>
                </example>
                <para>In the example above, the parameters to <code>HookRegistry::register</code>
                    are:</para>
                <orderedlist>
                    <listitem>
                        <para>The name of the hook. See the complete list of hooks below.</para>
                    </listitem>
                    <listitem>
                        <para>The callback function to which control should be passed when the hook
                            is encountered. This is the same callback format used by PHP's
                                <code>call_user_func</code> function; see the documentation at <link
                                xlink:href="http://php.net/">http://php.net</link> for more
                            information. It is important that <code>$this</code> be included in the
                            array by reference, or you may encounter problems with multiple
                            instances of the plugin object.</para>
                    </listitem>
                </orderedlist>

                <para>The definition of the callback function (named and located in the above
                    registration call) is:</para>

                <example xml:id="pluginsHookRegistrationDefinition">
                    <title>Hook Registration Definition</title>
<programlisting><![CDATA[function callback($hookName, $args) { 
    $params =& $args[0]; 
    $smarty =& $args[1]; 
    $output =& $args[2]; 
    ... 
} ]]></programlisting>
                </example>
                <para>The parameter list for the callback function is always the same:</para>
                <orderedlist>
                    <listitem>
                        <para>The name of the hook that resulted in the callback receiving control
                            (which can be useful when several hook registrations are made with the
                            same callback function), and</para>
                    </listitem>
                    <listitem>
                        <para>An array of additional parameters passed to the callback. The contents
                            of this array depend on the hook being registered against. Since this is
                            a template hook, the callback can expect the three parameters named
                            above.</para>
                    </listitem>
                </orderedlist>

                <para>The array-based passing of parameters is slightly cumbersome, but it allows
                    hook calls to compatibly pass references to parameters if desired. Otherwise,
                    for example, the above code would receive a duplicated Smarty object rather than
                    the actual Smarty object and any changes to attributes of the
                    <code>$smarty</code> object would disappear upon returning.</para>

                <para>Finally, the return value from a hook callback is very important. If a hook
                    callback returns <code>true</code>, the hook registry considers this callback to
                    have definitively “handled" the hook and will not call further registered
                    callbacks on the same hook. If the callback returns <code>false</code>, other
                    callbacks registered on the same hook after the current one will have a chance
                    to handle the hook call.</para>

                <para>The above example adds a link to the Journal Manager's list of management
                    functions. If another plugin (or even the same plugin) was registered to add
                    another link to the same list, and this plugin returned <code>true</code>, the
                    other plugin's hook registration would not be called.</para>

            </sect2>
            <sect2 xml:id="pluginsPluginManagement">
                <title>Plugin Management</title>

                <para>In the example plugin, there are three functions that provide metadata about
                    the plugin: <code>getName()</code>, <code>getDisplayName()</code>, and
                        <code>getDescription()</code>. These are part of a management interface that
                    is available to the Journal Manager under “System Plugins".</para>

                <para>The result of the <code>getName()</code> call is used to refer to the plugin
                    symbolically and need not be human-readable; however, the
                    <code>getDisplayName()</code> and <code>getDescription()</code> functions should
                    return localized values. This was not done in the above example for brevity.</para>

                <para>The management interface allows plugins to specify various management
                    functions the Journal Manager can perform on the plugin using the
                        <code>getManagementVerbs()</code> and <code>manage($verb, $args)</code>
                    functions. <code>getManagementVerbs()</code> should return an array of
                    two-element arrays as follows:</para>

                <example xml:id="pluginsExampleSpecifyingManagementVerbs">
                    <title>Specifying Management Verbs</title>
<programlisting><![CDATA[$verbs = parent::getManagementVerbs(); 
$verbs[] =  array('func1', Locale::translate('my.localization.key.for.func1')); 
$verbs[] =  array('func2', Locale::translate('my.localization.key.for.func2')); 
]]></programlisting>
                </example>

                <para>Note that the parent call should be respected as above, as some plugin
                    categories provide management verbs automatically.</para>

                <para>Using the above sample code, the plugin should be ready to receive the
                    management verbs <code>func1</code> and <code>func2</code> as follows (once
                    again respecting any management verbs provided by the parent class):</para>

                <example xml:id="pluginsExampleReceivingManagementVerbs">
                    <title>Receiving Management Verbs</title>
<programlisting><![CDATA[function manage($verb, $args) { 
    if (!parent::manage($verb, $args)) switch ($verb) { 
        case 'func1': 
            // Handle func1 here. 
            break; 
        case 'func2': 
            // Handle func2 here. 
            break; 
        default: 
            return false; 
        } 
    return true; 
    } 
]]></programlisting>
                </example>
            </sect2>
        </sect1>
        <sect1 xml:id="pluginsAdditionalPluginFunctionality">
            <title>Additional Plugin Functionality</title>

            <para>There are several additional plugin functionalities that may prove useful:</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="strong">Plugin Settings</emphasis>: Plugins can store and
                        retrieve settings with a mechanism similar to Journal Settings. Use the
                        Plugin class's <code>getSetting</code> and <code>updateSetting</code>
                        functions.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">Templates</emphasis>: Any plugin can keep
                        templates in its plugin directory and display them by calling:</para>
                    <informalexample>
<programlisting><![CDATA[$templateMgr->display($this->getTemplatePath() . 'templateName.tpl');]]></programlisting>
                    </informalexample>
                    <para>See the native import/export plugin for an example.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">Schema Management</emphasis>: By overriding
                            <code>getInstallSchemaFile()</code> and placing the named schema file in
                        the plugin directory, <code>generic</code> plugins can make use of OJS's
                        schema-management features. This function is called on OJS install or
                        upgrade.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">Data Management</emphasis>: By overriding
                            <code>getInstallDataFile()</code> and placing the named data file in the
                        plugin directory, <code>generic</code> plugins can make use of OJS's data
                        installation feature. This function is called on OJS install or
                    upgrade.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="strong">Helper Code</emphasis>: Helper code in the
                        plugin's directory can be imported using</para>
                    <informalexample>
<programlisting><![CDATA[$this->import('HelperCode'); // imports HelperCode.inc.php]]></programlisting>
                    </informalexample>

                </listitem>
            </itemizedlist>
        </sect1>
        <sect1 xml:id="pluginsHookList">
            <title>Hook List</title>

            <para>The following list describes all the hooks built into OJS as of release 2.1.
                Ampersands before variable names (e.g. <code><![CDATA[&$sourceFile]]></code>)
                indicate that the parameter has been passed to the hook callback in the parameters
                array by reference and can be modified by the hook callback. The effect of the hook
                callback's return value is specified where applicable; in addition to this, the hook
                callback return value will always determine whether or not further callbacks
                registered on the same hook will be skipped.</para>

            <table frame="all" xml:id="pluginsTableHookList">
                <title>Hook List</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>
                                <para>Name</para>
                            </entry>
                            <entry>
                                <para>Parameters</para>
                            </entry>
                            <entry>
                                <para>Description</para>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <para>
                                    <code>LoadHandler</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$page]]></code>,
                                        <code><![CDATA[&$op]]></code>,
                                        <code><![CDATA[&$sourceFile]]></code></para>
                            </entry>
                            <entry>
                                <para>Called by OJS's main <filename>index.php</filename> script
                                    after the page (<code><![CDATA[&$page]]></code>), operation
                                        (<code><![CDATA[&$op]]></code>), and handler code file
                                        (<code><![CDATA[&$sourceFile]]></code>) names have been
                                    determined, but before <code>$sourceFile</code> is loaded. Can
                                    be used to intercept browser requests for handling by the
                                    plugin. Returning <code>true</code> from the callback will
                                    prevent OJS from loading the handler stub in
                                    <code>$sourceFile</code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ArticleEmailLogDAO::&#x200b;_returnLogEntryFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$entry]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ArticleEmailLogDAO</code> builds an
                                        <code>ArticleEmailLogEntry</code>
                                        (<code><![CDATA[&$entry]]></code>) from the database row
                                        (<code><![CDATA[&$row]]></code>), but before the entry
                                    is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ArticleEventLogDAO::&#x200b;_returnLogEntryFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$entry]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ArticleEventLogDAO</code> builds an
                                        <code>ArticleEventLogEntry</code>
                                        (<code><![CDATA[&$entry]]></code>) from the database row
                                        (<code><![CDATA[&$row]]></code>), but before the entry
                                    is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ArticleCommentDAO::&#x200b;_returnArticleCommentFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>Comment,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ArticleCommentDAO</code> builds an
                                        <code>ArticleComment</code>
                                        (<code><![CDATA[&$articleComment]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the comment is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ArticleDAO::&#x200b;_returnArticleFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ArticleDAO</code> builds an
                                    <code>Article</code> (<code><![CDATA[&$article]]></code>)
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the article is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ArticleFileDAO::&#x200b;_returnArticleFileFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$articleFile]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ArticleFileDAO</code> builds an
                                        <code>ArticleFile</code>
                                        (<code><![CDATA[&$articleFile]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the article file is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ArticleGalleyDAO::&#x200b;_returnGalleyFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$galley]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ArticleGalleyDAO</code> builds an
                                        <code>ArticleGalley</code>
                                    (<code><![CDATA[&$galley]]></code>) from the database row
                                        (<code><![CDATA[&$row]]></code>), but before the galley
                                    is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ArticleNoteDAO::&#x200b;_returnArticleNoteFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$articleNote]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ArticleNoteDAO</code> builds an
                                        <code>ArticleNote</code>
                                        (<code><![CDATA[&$articleNote]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the entry is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorDAO::&#x200b;_returnAuthorFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$author]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>AuthorDAO</code> builds an
                                    <code>Author</code> (<code><![CDATA[&$author]]></code>) from
                                    the database row (<code><![CDATA[&$row]]></code>), but
                                    before the author is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SuppFileDAO::&#x200b;_returnSuppFileFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$suppFile]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>SuppFileDAO</code> builds an
                                    <code>SuppFile</code> (<code><![CDATA[&$suppFile]]></code>)
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the supplementary file is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>PublishedArticleDAO::&#x200b;_returnPublishedArticleFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$publishedArticle]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>PublishedArticleDAO</code> builds a
                                        <code>PublishedArticle</code>
                                        (<code><![CDATA[&$publishedArticle]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the published article is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CommentDAO::&#x200b;_returnCommentFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$comment]]></code>,
                                        <code><![CDATA[&$row]]></code>,
                                        <code><![CDATA[&$childLevels]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>CommentDAO</code> builds a
                                    <code>Comment</code> (<code><![CDATA[&$comment]]></code>)
                                    from the database row (<code><![CDATA[&$row]]></code>),
                                    before fetching <code><![CDATA[&$childLevels]]></code> child
                                    comments and returning the comment to the calling function.
                                    Returning <code>true</code> will prevent OJS from fetching any
                                    child comments.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;redirect</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$url]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before <code>Request::&#x200b;redirect</code>
                                    performs a redirect to <code><![CDATA[&$url]]></code>.
                                    Returning <code>true</code> will prevent OJS from performing the
                                    redirect after the hook is finished. Can be used to intercept
                                    and rewrite redirects.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getBaseUrl</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$baseUrl]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getBaseUrl</code> is called after the
                                    base URL has been determined but before returning it to the
                                    caller. This value is used for all subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getBasePath</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$basePath]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getBasePath</code> is called after
                                    the base path has been determined but before returning it to the
                                    caller. This value is used for all subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getIndexUrl</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$indexUrl]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getIndexUrl</code> is called after
                                    the index URL has been determined but before returning it to the
                                    caller. This value is used for all subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getCompleteUrl</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$completeUrl]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                        <code>Request::&#x200b;getCompleteUrl</code> is called
                                    after the complete URL has been determined but before returning
                                    it to the caller. This value is used for all subsequent
                                calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getRequestUrl</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$requestUrl]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getRequestUrl</code> is called after
                                    the request URL has been determined but before returning it to
                                    the caller. This value is used for all subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getQueryString</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$queryString]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                        <code>Request::&#x200b;getQueryString</code> is called
                                    after the query string has been determined but before returning
                                    it to the caller. This value is used for all subsequent
                                calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getRequestPath</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$requestPath]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                        <code>Request::&#x200b;getRequestPath</code> is called
                                    after the request path has been determined but before returning
                                    it to the caller. This value is used for all subsequent
                                calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getServerHost</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$serverHost]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getServerHost</code> is called after
                                    the server host has been determined but before returning it to
                                    the caller. This value is used for all subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getProtocol</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$protocol]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getProtocol</code> is called after
                                    the protocol (<code>http</code> or <code>https</code>) has been
                                    determined but before returning it to the caller. This value is
                                    used for all subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getRemoteAddr</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$remoteAddr]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getRemoteAddr</code> is called after
                                    the remote address has been determined but before returning it
                                    to the caller. This value is used for all subsequent
                                calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getRemoteDomain</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$remoteDomain]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                        <code>Request::&#x200b;getRemoteDomain</code> is called
                                    after the remote domain has been determined but before returning
                                    it to the caller. This value is used for all subsequent
                                calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getUserAgent</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$userAgent]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                    <code>Request::&#x200b;getUserAgent</code> is called after
                                    the user agent has been determined but before returning it to
                                    the caller. This value is used for all subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Request::&#x200b;getRequestedJournalPath</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$journal]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called the first time
                                        <code>Request::&#x200b;getRequestedJournalPath</code> is
                                    called after the requested journal path has been determined but
                                    before returning it to the caller. This value is used for all
                                    subsequent calls.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>[Anything]DAO::&#x200b;Constructor</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$dataSource]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called whenever the named DAO's constructor is called with the
                                    specified <code><![CDATA[&$dataSource]]></code>. This hook
                                    should only be used with PHP >= 4.3.0.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>[Anything]DAO::&#x200b;[Any function calling
                                        DAO::&#x200b;retrieve]</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sql]]></code>,
                                        <code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$value]]></code></para>
                            </entry>
                            <entry>
                                <para>Any DAO function calling DAO::&#x200b;retrieve will cause
                                    a hook to be triggered. The SQL statement in
                                        <code><![CDATA[&$sql]]></code> can be modified, as can
                                    the ADODB parameters in <code><![CDATA[&$params]]></code>.
                                    If the hook callback is intended to replace the function of this
                                    call entirely, <code><![CDATA[&$value]]></code> should
                                    receive the retrieve call's intended result and the hook should
                                    return <code>true</code>. This hook should only be used with PHP
                                    >= 4.3.0.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>[Anything]DAO::&#x200b;[Any function calling
                                        DAO::&#x200b;retrieveCached]</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sql]]></code>,
                                        <code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$secsToCache]]></code>,
                                        <code><![CDATA[&$value]]></code></para>
                            </entry>
                            <entry>
                                <para>Any DAO function calling
                                    <code>DAO::&#x200b;retrieveCached</code> will cause a hook
                                    to be triggered. The SQL statement in
                                        <code><![CDATA[&$sql]]></code> can be modified, as can
                                    the ADODB parameters in <code><![CDATA[&$params]]></code>
                                    and the seconds-to-cache value in
                                        <code><![CDATA[&$secsToCache]]></code>. If the hook
                                    callback is intended to replace the function of this call
                                    entirely, <code><![CDATA[&$value]]></code> should receive
                                    the retrieve call's intended result and the hook should return
                                        <code>true</code>. This hook should only be used with PHP >=
                                    4.3.0.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>[Anything]DAO::&#x200b;[Any function calling
                                        DAO::&#x200b;retrieveLimit]</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sql]]></code>,
                                        <code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$numRows]]></code>,
                                        <code><![CDATA[&$offset]]></code>,
                                        <code><![CDATA[&$value]]></code></para>
                            </entry>
                            <entry>
                                <para>Any DAO function calling
                                    <code>DAO::&#x200b;retrieveCached</code> will cause a hook
                                    to be triggered. The SQL statement in
                                        <code><![CDATA[&$sql]]></code> can be modified, as can
                                    the ADODB parameters in <code><![CDATA[&$params]]></code>,
                                    and the fetch seek and limit specified in
                                        <code><![CDATA[&$offset]]></code> and
                                        <code><![CDATA[&$numRows]]></code>. If the hook callback
                                    is intended to replace the function of this call entirely,
                                        <code><![CDATA[&$value]]></code> should receive the
                                    retrieve call's intended result and the hook should return
                                        <code>true</code>. This hook should only be used with PHP >=
                                    4.3.0.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>[Anything]DAO::&#x200b;[Any function calling
                                        DAO::&#x200b;retrieveRange]</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sql]]></code>,
                                        <code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$dbResultRange]]></code>,
                                        <code><![CDATA[&$value]]></code></para>
                            </entry>
                            <entry>
                                <para>Any DAO function calling
                                    <code>DAO::&#x200b;retrieveRange</code> will cause a hook to
                                    be triggered. The SQL statement in
                                    <code><![CDATA[&$sql]]></code> can be modified, as can the
                                    ADODB parameters in <code><![CDATA[&$params]]></code> and
                                    the range information in
                                    <code><![CDATA[&$dbResultRange]]></code>. If the hook
                                    callback is intended to replace the function of this call
                                    entirely, <code><![CDATA[&$value]]></code> should receive
                                    the retrieve call's intended result and the hook should return
                                        <code>true</code>. This hook should only be used with PHP >=
                                    4.3.0.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>[Anything]DAO::&#x200b;[Any function calling
                                        DAO::&#x200b;update]</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sql]]></code>,
                                        <code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$value]]></code></para>
                            </entry>
                            <entry>
                                <para>Any DAO function calling <code>DAO::&#x200b;update</code>
                                    will cause a hook to be triggered. The SQL statement in
                                        <code><![CDATA[&$sql]]></code> can be modified, as can
                                    the ADODB parameters in <code><![CDATA[&$params]]></code>.
                                    If the hook callback is intended to replace the function of this
                                    call entirely, <code><![CDATA[&$value]]></code> should
                                    receive the retrieve call's intended result and the hook should
                                    return <code>true</code>. This hook should only be used with PHP
                                    >= 4.3.0.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>TemporaryFileDAO::&#x200b;_returnTemporaryFileFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$temporaryFile]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after TemporaryFileDAO builds a TemporaryFile
                                        (<code><![CDATA[&$temporaryFile]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the temporary file is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Locale::&#x200b;_cacheMiss</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$id]]></code>,
                                        <code><![CDATA[&$locale]]></code>,
                                        <code><![CDATA[&$value]]></code></para>
                            </entry>
                            <entry>
                                <para>Called if a locale key couldn't be found in the locale cache.
                                        <code><![CDATA[&$id]]></code> is the key for the missing
                                    locale string, <code><![CDATA[&$locale]]></code> is the
                                    locale name (e.g. <code>en_US</code>). If this hook is to
                                    provide the result for this cache miss, the value should be
                                    stored in <code><![CDATA[&$value]]></code> and the hook
                                    callback should return <code>true</code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Install::&#x200b;installer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$installer]]></code>,
                                        <code><![CDATA[&$descriptor]]></code>,
                                        <code><![CDATA[&$params]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the installer is instantiated with the descriptor
                                    path in <code><![CDATA[&$descriptor]]></code> and the
                                    parameters in <code><![CDATA[&$params]]></code>. If the hook
                                    returns true, the usual initialization of <code>Installer</code>
                                    attributes will not be performed.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Installer::&#x200b;destroy</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$installer]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Triggered when the installer cleanup method is called.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Installer::&#x200b;preInstall</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$installer]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after the installer's pre-installation tasks are
                                    completed but before the success/&#x200b;failure result in
                                        <code><![CDATA[&$result]]></code> is returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Installer::&#x200b;postInstall</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$installer]]></code>,</para>
                                <para>
                                    <code><![CDATA[&$result]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the installer's post-installation tasks are
                                    completed but before the success/&#x200b;failure result in
                                        <code><![CDATA[&$result]]></code> is returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Installer::&#x200b;parseInstaller</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$installer]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after the installer has completed parsing the
                                    installation task set but before the success/&#x200b;failure
                                    result in <code><![CDATA[&$result]]></code> is
                                returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Installer::&#x200b;executeInstaller</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$installer]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after the installer has executed but before the
                                    success/&#x200b;failure result in
                                        <code><![CDATA[&$result]]></code> is returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Installer::&#x200b;updateVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$installer]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after the installer has updated the system version
                                    information but before the success/&#x200b;failure result in
                                        <code><![CDATA[&$result]]></code> is returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>IssueAction::&#x200b;subscriptionRequired</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$journal]]></code>,
                                        <code><![CDATA[&$issue]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after OJS has determined whether or not a subscription
                                    is required for viewing <code><![CDATA[&$issue]]></code> in
                                        <code><![CDATA[&$journal]]></code> but before the
                                    true/&#x200b;false value
                                    <code><![CDATA[&$result]]></code> is returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>IssueAction::&#x200b;subscribedUser</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$journal]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after OJS has determined whether or not the current
                                    user is subscribed to <code><![CDATA[&$journal]]></code>,
                                    before the true/&#x200b;false value
                                        <code><![CDATA[&$result]]></code> is returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>IssueAction::&#x200b;subscribedDomain</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$journal]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after OJS has determined whether or not the current
                                    user comes from a domain subscribing to
                                        <code><![CDATA[&$journal]]></code>, before the
                                    true/&#x200b;false value
                                    <code><![CDATA[&$result]]></code> is returned.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>IssueDAO::&#x200b;_returnIssueFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$issue]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>IssueDAO</code> builds an
                                    <code>Issue</code> (<code><![CDATA[&$issue]]></code>) from
                                    the database row (<code><![CDATA[&$row]]></code>), but
                                    before the issue is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>IssueDAO::&#x200b;_returnPublishedIssueFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$issue]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>IssueDAO</code> builds a published
                                        <code>Issue</code> (<code><![CDATA[&$issue]]></code>)
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the published issue is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>JournalDAO::&#x200b;_returnJournalFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$journal]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>JournalDAO</code> builds a
                                    <code>Journal</code> (<code><![CDATA[&$journal]]></code>)
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the journal is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionDAO::&#x200b;_returnSectionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$section]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>SectionDAO</code> builds a
                                    <code>Section</code> (<code><![CDATA[&$section]]></code>)
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the section is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>EmailTemplateDAO::&#x200b;_returnBaseEmailTemplateFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$emailTemplate]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>EmailTemplateDAO</code> builds a
                                        <code>BaseEmailTemplate</code>
                                        (<code><![CDATA[&$emailTemplate]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the base email template is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>EmailTemplateDAO::&#x200b;_returnLocaleEmailTemplateFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$emailTemplate]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>EmailTemplateDAO</code> builds a localized
                                        <code>LocaleEmailTemplate</code>
                                        (<code><![CDATA[&$emailTemplate]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the localized email template is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>EmailTemplateDAO::&#x200b;_returnEmailTemplateFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$emailTemplate]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>EmailTemplateDAO</code> builds an
                                        <code>EmailTemplate</code>
                                        (<code><![CDATA[&$emailTemplate]]></code>) from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the email template is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Mail::&#x200b;send</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$mail]]></code>,
                                        <code><![CDATA[&$recipients]]></code>,
                                        <code><![CDATA[&$subject]]></code>,
                                        <code><![CDATA[&$mail]]></code>Body,
                                        <code><![CDATA[&$headers]]></code>,
                                        <code><![CDATA[&$additionalParameters]]></code></para>
                            </entry>
                            <entry>
                                <para>Called just before an email with the specified parameters is
                                    sent. If this hook callback is to handle the email sending
                                    itself, the callback should return <code>true</code> and OJS's
                                    sending function will be skipped.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>RTDAO::&#x200b;_returnJournalRTFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$rt]]></code>,
                                    <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>RTDAO</code> builds a Reading Tools
                                        <code>RT</code> (<code><![CDATA[&$rt]]></code>) object
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the Reading Tools object is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>RTDAO::&#x200b;_returnVersionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$version]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>RTDAO</code> builds a Reading Tools
                                        <code>Version</code>
                                    (<code><![CDATA[&$version]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the Reading Tools version object is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>RTDAO::&#x200b;_returnSearchFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$search]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>RTDAO</code> builds a Reading Tools
                                        <code>Search</code> (<code><![CDATA[&$search]]></code>)
                                    object from the database row
                                    (<code><![CDATA[&$row]]></code>), but before the Reading
                                    Tools search object is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>RTDAO::&#x200b;_returnContextFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$context]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>RTDAO</code> builds a Reading Tools
                                        <code>Context</code>
                                    (<code><![CDATA[&$context]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the Reading Tools context object is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AccessKeyDAO::&#x200b;_returnAccessKeyFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$accessKey]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after AccessKeyDAO builds an <code>AccessKey</code>
                                        (<code><![CDATA[&$accessKey]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the access key is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>RoleDAO::&#x200b;_returnRoleFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$role]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>RoleDAO</code> builds a <code>Role</code>
                                        (<code><![CDATA[&$role]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the Role is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SiteDAO::&#x200b;_returnSiteFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$site]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>SiteDAO</code> builds a <code>Site</code>
                                        (<code><![CDATA[&$site]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the Site is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>VersionDAO::&#x200b;_returnVersionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$version]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>VersionDAO</code> builds a
                                    <code>Version</code> (<code><![CDATA[&$version]]></code>)
                                    object from the database row
                                    (<code><![CDATA[&$row]]></code>), but before the Version is
                                    passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;deleteArticleFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$articleFile]]></code>,
                                        <code><![CDATA[&$authorRevisions]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes the Author's article file
                                        <code><![CDATA[&$articleFile]]></code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;uploadRevisedVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$authorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS uploads a revised version of
                                        <code><![CDATA[&$authorSubmission]]></code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;completeAuthorCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$authorSubmission]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the Author completes their copyediting step before
                                    OJS sends the email <code><![CDATA[&$email]]></code>, if
                                    enabled, and flags the copyediting step as completed.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;copyeditUnderway</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$authorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the Author indicates that their copyediting step
                                    is underway, before OJS flags the underway date.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;uploadCopyeditVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$authorSubmission]]></code>,
                                        <code><![CDATA[&$copyEditStage]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the author uploads a file for
                                        <code><![CDATA[&$authorSubmission]]></code> to the
                                    supplied <code><![CDATA[&$copyEditStage]]></code> before OJS
                                    accepts the file upload.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;viewLayoutComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the author requests the layout comments for the
                                    article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;postLayoutComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the author attempts to post a layout comment on
                                    the article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from recording the supplied
                                    comment, it should return <code>true</code> from the callback
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;viewEditorDecisionComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the author requests the editor decision comments
                                    for the article <code><![CDATA[&$article]]></code>. If the
                                    hook registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;emailEditorDecisionComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$authorSubmission]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS sends the editor decision comments for the
                                    article <code><![CDATA[&$authorSubmission]]></code> in the
                                    email message <code><![CDATA[&$email]]></code>. This hook
                                    should only be used on OJS > 2.1.0-1.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;viewCopyeditComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the author requests the copyedit comments for the
                                    article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;postCopyeditComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the author attempts to post a copyediting comment
                                    on the article <code><![CDATA[&$article]]></code>. If the
                                    hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;viewProofreadComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the author requests the proofreading comments for
                                    the article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;postProofreadComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the author attempts to post a proofreading comment
                                    on the article <code><![CDATA[&$article]]></code>. If the
                                    hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;downloadAuthorFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>,
                                        <code><![CDATA[&$canDownload]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the author wishes to download an article file
                                        (<code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) after OJS has
                                    determined whether or not the author has access to that file
                                    (modifiable boolean flag
                                    <code><![CDATA[&$canDownload]]></code>) but before the
                                    download itself begins. If the hook registrant wishes to
                                    override OJS's default download behavior, it should return
                                        <code>true</code> from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorSubmissionDAO::&#x200b;_returnAuthorSubmissionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$authorSubmission]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>AuthorSubmissionDAO</code> builds an
                                        <code>AuthorSubmission</code>
                                        (<code><![CDATA[&$authorSubmission]]></code>) object
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the Author Submission is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Action::&#x200b;viewMetadata</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$role]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when a user in the given role
                                        (<code><![CDATA[&$role]]></code>) wishes to view the
                                    metadata for the given article
                                    (<code><![CDATA[&$article]]></code>). If the hook registrant
                                    wishes to prevent OJS from instantiating and displaying the
                                    regular metadata form, it should return <code>true</code> from
                                    its callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Action::&#x200b;saveMetadata</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS updates the metadata for the specified
                                    article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from performing the update, it
                                    should return <code>true</code> from its callback
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Action::&#x200b;instructions</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$type]]></code>,
                                        <code><![CDATA[&$allowed]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS displays the instructions of the requested
                                    type <code><![CDATA[&$type]]></code> (<code>copy</code>,
                                        <code>layout</code>, or <code>proof</code>); the allowed
                                    types are listed in <code><![CDATA[&$allowed]]></code>. If
                                    the hook registrant wishes to prevent OJS from displaying the
                                    instructions, it should return <code>true</code> from its
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Action::&#x200b;editComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$comment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS instantiates and displays the comment edit
                                    form for the given article
                                    (<code><![CDATA[&$article]]></code>) and comment
                                        (<code><![CDATA[&$comment]]></code>). If the hook
                                    registrant wishes to prevent OJS from doing this, it should
                                    return <code>true</code> from its callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Action::&#x200b;saveComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$comment]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when a user attempts to save a comment
                                        (<code><![CDATA[&$comment]]></code>) on the article
                                        (<code><![CDATA[&$article]]></code>). If the hook
                                    registrant wishes to prevent OJS from saving the supplied
                                    comment, it should return <code>true</code> from the callback
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Action::&#x200b;deleteComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$comment]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes the supplied comment. If the hook
                                    registrant wishes to prevent OJS from deleting the comment, it
                                    should return <code>true</code> from the callback
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyAssignmentDAO::&#x200b;_returnCopyAssignmentFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$copyAssignment]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>CopyAssignmentDAO</code> builds a
                                        <code>CopyAssignment</code>
                                        (<code><![CDATA[&$copyAssignment]]></code>) object from
                                    the database row (<code><![CDATA[&$row]]></code>), but
                                    before the copyediting assignment is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;completeCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$copyeditorSubmission]]></code>,
                                        <code><![CDATA[&$editAssignments]]></code>,
                                        <code><![CDATA[&$author]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS sends the <code>COPYEDIT_COMPLETE</code>
                                    email (if enabled) and flags the copyeditor's initial
                                    copyediting stage as complete. </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;completeFinalCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$copyeditorSubmission]]></code>,
                                        <code><![CDATA[&$editAssignments]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS sends the
                                    <code>COPYEDIT_FINAL_COMPLETE</code> email (if enabled) and
                                    flags the copyeditor's final copyediting stage as complete.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;copyeditUnderway</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$copyeditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags the copyediting phase for the given
                                    submission (<code><![CDATA[&$copyeditorSubmission]]></code>)
                                    as underway. If the hook registrant wishes to prevent OJS from
                                    performing this flagging and the associated log entry, it should
                                    return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;uploadCopyeditVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$copyeditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS uploads a revised version of
                                        <code><![CDATA[&$copyeditorSubmission]]></code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;viewLayoutComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the copyeditor requests the layout comments for
                                    the article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;postLayoutComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the copyeditor attempts to post a layout comment
                                    on the article <code><![CDATA[&$article]]></code>. If the
                                    hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;viewCopyeditComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the copyeditor requests the copyediting comments
                                    for the article <code><![CDATA[&$article]]></code>. If the
                                    hook registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;postCopyeditComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the copyeditor attempts to post a copyediting
                                    comment on the article <code><![CDATA[&$article]]></code>.
                                    If the hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function. This hook should only be used with OJS >
                                    2.1.0-1.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorAction::&#x200b;downloadCopyeditorFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the copyeditor wishes to download an article file
                                        (<code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) after OJS has
                                    determined whether or not the copyeditor has access to that file
                                    (modifiable boolean flag
                                    <code><![CDATA[&$canDownload]]></code>) but before the
                                    download itself begins. If the hook registrant wishes to
                                    override OJS's default download behavior, it should return
                                        <code>true</code> from the callback function. This hook
                                    should only be used with OJS > 2.1.0-1.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CopyeditorSubmissionDAO::&#x200b;_returnCopyeditorSubmissionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$copyeditorSubmission]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>CopyeditorSubmissionDAO</code> builds a
                                        <code>CopyeditorSubmission</code>
                                        (<code><![CDATA[&$copyeditorSubmission]]></code>) object
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the copyeditor submission is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>EditAssignmentsDAO::&#x200b;_returnEditAssignmentFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$editAssignment]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>EditAssignmentsDAO</code> builds an
                                        <code>EditAssignment</code>
                                        (<code><![CDATA[&$editAssignment]]></code>) object from
                                    the database row (<code><![CDATA[&$row]]></code>), but
                                    before the editing assignment is passed back to the calling
                                    function. This hook should only be used with OJS >
                                2.1.0-1.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>EditorAction::&#x200b;assignEditor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$editorSubmission]]></code>,
                                        <code><![CDATA[&$sectionEditor]]></code>,
                                        <code><![CDATA[&$isEditor]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS assigns the specified editor or section
                                    editor (<code><![CDATA[&$sectionEditor]]></code>) to the
                                    article (<code><![CDATA[&$editorSubmission]]></code>) and
                                    sends (if enabled) the supplied email
                                        <code><![CDATA[&$email]]></code>. The
                                        <code><![CDATA[&$sectionEditor]]></code> flag, when
                                    true, indicates that the user being assigned is an editor, not a
                                    section editor. (Prior to OJS 2.2 this flag did not
                                exist.)</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>EditorSubmissionDAO::&#x200b;_returnEditorSubmissionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$editorSubmission]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>EditorSubmissionDAO</code> builds an
                                        <code>EditorSubmission</code>
                                        (<code><![CDATA[&$editorSubmission]]></code>) object
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the editor submission is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutAssignmentDAO::&#x200b;_returnLayoutAssignmentFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$layoutAssignment]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>LayoutAssignmentDAO</code> builds a
                                        <code>LayoutAssignment</code>
                                        (<code><![CDATA[&$layoutAssignment]]></code>) object
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the layout assignment is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;deleteGalley</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$galley]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes the specified galley
                                        (<code><![CDATA[&$galley]]></code>) for the article
                                        (<code><![CDATA[&$article]]></code>). If the hook
                                    registrant wishes to prevent OJS from deleting the galley, it
                                    should return <code>true</code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;deleteSuppFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$suppFile]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes the specified supplementary file
                                        (<code><![CDATA[&$suppFile]]></code>) for the article
                                        (<code><![CDATA[&$article]]></code>). If the hook
                                    registrant wishes to prevent OJS from deleting the supplementary
                                    file, it should return <code>true</code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;completeLayoutEditing</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$layoutAssignment]]></code>,
                                        <code><![CDATA[&$editAssignments]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags the layout editing assignment
                                        (<code><![CDATA[&$layoutAssignment]]></code>) for the
                                    article (<code><![CDATA[&$submission]]></code>) and sends
                                    (if enabled) the supplied email
                                    <code><![CDATA[&$email]]></code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;viewLayoutComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the layout editor requests the layout comments for
                                    the article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;postLayoutComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the layout editor attempts to post a layout
                                    comment on the article <code><![CDATA[&$article]]></code>.
                                    If the hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;viewProofreadComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the layout editor requests the proofreading
                                    comments for the article <code><![CDATA[&$article]]></code>.
                                    If the hook registrant wishes to prevent OJS from instantiating
                                    and displaying the comment form, it should return
                                    <code>true</code> from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;postProofreadComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the layout editor attempts to post a proofreading
                                    comment on the article <code><![CDATA[&$article]]></code>.
                                    If the hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;downloadFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>,
                                        <code><![CDATA[&$canDownload]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the layout editor wishes to download an article
                                    file (<code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) after OJS has
                                    determined whether or not the layout editor has access to that
                                    file (modifiable boolean flag
                                        <code><![CDATA[&$canDownload]]></code>) but before the
                                    download itself begins. If the hook registrant wishes to
                                    override OJS's default download behavior, it should pass a
                                    success boolean into <code><![CDATA[&$result]]></code> and
                                    return <code>true</code> from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorSubmissionDAO::&#x200b;_returnLayoutEditorSubmissionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>LayoutEditorSubmissionDAO</code> builds a
                                        <code>LayoutEditorSubmission</code>
                                        (<code><![CDATA[&$submission]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the submission is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofAssignmentDAO::&#x200b;_returnProofAssignmentFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$proofAssignment]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ProofAssignmentDAO</code> builds a
                                        <code>ProofAssignment</code>
                                        (<code><![CDATA[&$proofAssignment]]></code>) object from
                                    the database row (<code><![CDATA[&$row]]></code>), but
                                    before the proofreading assignment is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;selectProofreader</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$userId]]></code>,
                                        <code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$proofAssignment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS designates the supplied user
                                        (<code><![CDATA[&$userId]]></code>) as a proofreader of
                                    the article (<code><![CDATA[&$article]]></code>) with the
                                    specified proof assignment
                                        (<code><![CDATA[&$proofAssignment]]></code>). If the
                                    hook registrant wishes to prevent OJS from performing its usual
                                    actions, it should return <code>true</code> from its
                                callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;queueForScheduling</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$proofAssignment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the proofreader with the given assignment
                                        (<code><![CDATA[&$proofAssignment]]></code>) queues the
                                    supplied article for scheduling
                                    (<code><![CDATA[&$article]]></code>). If the hook registrant
                                    wishes to prevent OJS from performing its usual actions, it
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;proofreadEmail</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$proofAssignment]]></code>,
                                        <code><![CDATA[&$email]]></code>,
                                        <code><![CDATA[&$mail]]></code>Type</para>
                            </entry>
                            <entry>
                                <para>Called before OJS sends a proofreader email of the specified
                                        <code><![CDATA[&$mail]]></code>Type (e.g.
                                        <code>PROOFREAD_LAYOUT_COMPLETE</code>) and flags the
                                    appropriate dates given the supplied
                                        <code><![CDATA[&$proofAssignment]]></code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;authorProofreadingUnderway</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$proofAssignment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags an author's proofreading assignment
                                        (<code><![CDATA[&$proofAssignment]]></code>) as underway
                                    for the article <code><![CDATA[&$submission]]></code>. If
                                    the hook registrant wishes to prevent OJS from flagging the
                                    assignment as underway, it should return <code>true</code> from
                                    its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;proofreaderProofreadingUnderway</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$proofAssignment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags a proofreader's proofreading
                                    assignment (<code><![CDATA[&$proofAssignment]]></code>) as
                                    underway for the article
                                    <code><![CDATA[&$submission]]></code>. If the hook
                                    registrant wishes to prevent OJS from flagging the assignment as
                                    underway, it should return <code>true</code> from its
                                callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;layoutEditorProofreadingUnderway</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$proofAssignment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags a layout editor's proofreading
                                    assignment (<code><![CDATA[&$proofAssignment]]></code>) as
                                    underway for the article
                                    <code><![CDATA[&$submission]]></code>. If the hook
                                    registrant wishes to prevent OJS from flagging the assignment as
                                    underway, it should return <code>true</code> from its
                                callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;downloadProofreaderFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>,
                                        <code><![CDATA[&$canDownload]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the proofreader wishes to download an article file
                                        (<code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) after OJS has
                                    determined whether or not the proofreader has access to that
                                    file (modifiable boolean flag
                                        <code><![CDATA[&$canDownload]]></code>) but before the
                                    download itself begins. If the hook registrant wishes to
                                    override OJS's default download behavior, it should pass a
                                    success boolean into <code><![CDATA[&$result]]></code> and
                                    return <code>true</code> from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;viewProofreadComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the proofreader requests the proofreading comments
                                    for the article <code><![CDATA[&$article]]></code>. If the
                                    hook registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;postProofreadComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the proofreader attempts to post a proofreading
                                    comment on the article <code><![CDATA[&$article]]></code>.
                                    If the hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;viewLayoutComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the proofreader requests the layout comments for
                                    the article <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderAction::&#x200b;postLayoutComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the proofreader attempts to post a layout comment
                                    on the article <code><![CDATA[&$article]]></code>. If the
                                    hook registrant wishes to prevent OJS from recording the
                                    supplied comment, it should return <code>true</code> from the
                                    callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ProofreaderSubmissionDAO::&#x200b;_returnProofreaderSubmissionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ProofreaderSubmissionDAO</code> builds a
                                        <code>ProofreaderSubmission</code>
                                        (<code><![CDATA[&$submission]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the submission is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewAssignmentDAO::&#x200b;_returnReviewAssignmentFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ReviewAssignmentDAO</code> builds a
                                        <code>ReviewAssignment</code>
                                        (<code><![CDATA[&$reviewAssignment]]></code>) object
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the review assignment is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;confirmReview</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewerSubmission]]></code>,
                                        <code><![CDATA[&$email]]></code>,
                                        <code><![CDATA[&$decline]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a reviewer's
                                    accepted/&#x200b;declined status
                                        (<code><![CDATA[&$decline]]></code>) on the supplied
                                        <code><![CDATA[&$reviewAssignment]]></code> and sends
                                    the editor the email <code><![CDATA[&$email]]></code> (if
                                    enabled).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;recordRecommendation</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewerSubmission]]></code>,
                                        <code><![CDATA[&$email]]></code>,
                                        <code><![CDATA[&$recommendation]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a reviewer's recommendation
                                        (<code><![CDATA[&$recommendation]]></code>) on the
                                    supplied <code><![CDATA[&$reviewAssignment]]></code> and
                                    sends the editor the email <code><![CDATA[&$email]]></code>
                                    (if enabled).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;uploadReviewFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$reviewAssignment]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS updates the review file for the given
                                        <code><![CDATA[&$reviewAssignment]]></code> with the
                                    uploaded file.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;deleteReviewerVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes the supplied reviewer file
                                        (<code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$version]]></code>). If the hook
                                    registrant wishes to prevent OJS from deleting, it should return
                                        <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;viewPeerReviewComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$user]]></code>,
                                        <code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$reviewId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS displays the peer review comments to the
                                    reviewer (<code><![CDATA[&$user]]></code>) for the given
                                    article (<code><![CDATA[&$article]]></code>) and review ID
                                        (<code><![CDATA[&$reviewId]]></code>). If the hook
                                    registrant wishes to prevent OJS from displaying the reviews, it
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;postPeerReviewComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$user]]></code>,
                                        <code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$reviewId]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before records a new comment on the given review ID
                                        (<code><![CDATA[&$reviewId]]></code>) by the reviewer
                                        (<code><![CDATA[&$user]]></code>) on an article
                                        (<code><![CDATA[&$article]]></code>). If the hook
                                    registrant wishes to prevent OJS from recording the comment, it
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;downloadReviewerFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>,
                                        <code><![CDATA[&$canDownload]]></code>,
                                        <code><![CDATA[&$result]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the reviewer wishes to download an article file
                                        (<code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) after OJS has
                                    determined whether or not the reviewer has access to that file
                                    (modifiable boolean flag
                                    <code><![CDATA[&$canDownload]]></code>) but before the
                                    download itself begins. If the hook registrant wishes to
                                    override OJS's default download behavior, it should pass a
                                    success boolean into <code><![CDATA[&$result]]></code> and
                                    return <code>true</code> from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerAction::&#x200b;editComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$comment]]></code>,
                                        <code><![CDATA[&$reviewId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS instantiates and displays the comment edit
                                    form for the reviewer for a given article
                                        (<code><![CDATA[&$article]]></code>) and comment
                                        (<code><![CDATA[&$comment]]></code>). If the hook
                                    registrant wishes to prevent OJS from doing this, it should
                                    return <code>true</code> from its callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>ReviewerSubmissionDAO::&#x200b;_returnReviewerSubmissionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewerSubmission]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>ReviewerSubmissionDAO</code> builds a
                                        <code>ReviewerSubmission</code>
                                        (<code><![CDATA[&$reviewerSubmission]]></code>DAO)
                                    object from the database row
                                    (<code><![CDATA[&$row]]></code>), but before the review
                                    assignment is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>AuthorAction::&#x200b;designateReviewVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$authorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS designates the original file as the review
                                    version for the specified article
                                        (<code><![CDATA[&$authorSubmission]]></code>). To
                                    prevent OJS from performing this task, the hook registrant
                                    should return <code>true</code> from its callback function.
                                    Prior to OJS 2.1.1, this hook was called
                                        <code>SectionEditorAction::&#x200b;designateReviewVersion</code>
                                    and took a <code>SectionEditorSubmission</code> as a
                                parameter.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;changeSection</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$sectionId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS changes the section of the submission
                                        (<code><![CDATA[&$sectionEditorSubmission]]></code>) to
                                    the section with the given section ID
                                        (<code><![CDATA[&$sectionId]]></code>). To prevent OJS
                                    from performing this task, the hook registrant should return
                                        <code>true</code> from its callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;recordDecision</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$editorDecision]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a decision
                                        (<code><![CDATA[&$editorDecision]]></code>) for a
                                    submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>). To
                                    prevent OJS from performing this task, the hook registrant
                                    should return <code>true</code> from its callback
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;addReviewer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$reviewerId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS creates a new review assignment for the
                                    specified reviewer (<code><![CDATA[&$reviewerId]]></code>)
                                    on a submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>). To
                                    prevent OJS from performing this task, the hook registrant
                                    should return <code>true</code> from its callback
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;clearReview</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$reviewAssignment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS clears a review
                                        (<code><![CDATA[&$reviewAssignment]]></code>) on a
                                    submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>). To
                                    prevent OJS from performing this task, the hook registrant
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;notifyReviewer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags the notification of a reviewer with a
                                    pending review (<code><![CDATA[&$reviewAssignment]]></code>)
                                    on a submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>),
                                    sending the associated reviewer request email
                                        <code><![CDATA[&$email]]></code> (if enabled).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;cancelReview</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS cancels a review
                                        (<code><![CDATA[&$reviewAssignment]]></code>) on a
                                    submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>),
                                    sending the associated cancellation email
                                        (<code><![CDATA[&$email]]></code>) if enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;remindReviewer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS reminds a reviewer of a pending review
                                    assignment (<code><![CDATA[&$reviewAssignment]]></code>) on
                                    a submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>),
                                    sending the associated reminder email
                                        (<code><![CDATA[&$email]]></code>).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;thankReviewer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS thanks a reviewer for completing their
                                    review assignment
                                    (<code><![CDATA[&$reviewAssignment]]></code>) on a
                                    submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>), also
                                    sending the email <code><![CDATA[&$email]]></code> (if
                                    enabled).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;rateReviewer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$reviewer]]></code>,
                                        <code><![CDATA[&$quality]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a quality rating
                                        (<code><![CDATA[&$quality]]></code>) for a reviewer
                                        (<code><![CDATA[&$reviewer]]></code>) on a review
                                    assignment (<code><![CDATA[&$reviewAssignment]]></code>). To
                                    prevent OJS from recording the rating, the hook registrant
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;makeReviewerFileViewable</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$articleFile]]></code>,
                                        <code><![CDATA[&$viewable]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a new visibility setting
                                        (<code><![CDATA[&$viewable]]></code>) for a reviewer
                                    file (<code><![CDATA[&$articleFile]]></code>) belonging to a
                                    review assignment
                                    (<code><![CDATA[&$reviewAssignment]]></code>). To prevent
                                    OJS from recording the new setting, the hook registrant should
                                    return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;setDueDate</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$reviewer]]></code>,
                                        <code><![CDATA[&$dueDate]]></code>,
                                        <code><![CDATA[&$numWeeks]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS sets the due date on a reviewer
                                        (<code><![CDATA[&$reviewer]]></code>)'s review
                                    assignment (<code><![CDATA[&$reviewAssignment]]></code>) to
                                        <code><![CDATA[&$dueDate]]></code>. To prevent OJS from
                                    setting the due date, the hook registrant should return
                                        <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;unsuitableSubmission</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$author]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records an author
                                        (<code><![CDATA[&$author]]></code>)'s submission
                                        (<code><![CDATA[&$sectionEditorSubmission]]></code>) as
                                    unsuitable, sending <code><![CDATA[&$email]]></code> (if
                                    enabled).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;notifyAuthor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$author]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS sends an author notification email
                                        (<code><![CDATA[&$email]]></code>) to an author
                                        (<code><![CDATA[&$author]]></code>) regarding a
                                    submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;setReviewerRecommendation</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$reviewer]]></code>,
                                        <code><![CDATA[&$recommendation]]></code>,
                                        <code><![CDATA[&$acceptOption]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before a reviewer recommendation
                                        (<code><![CDATA[&$recommendation]]></code>) is recorded
                                    on a review assignment
                                    (<code><![CDATA[&$reviewAssignment]]></code>) for the
                                    reviewer <code><![CDATA[&$reviewer]]></code>. To prevent the
                                    recommendation from being recorded, the hook registrant should
                                    return <code>true</code> from its hook callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;setCopyeditFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS sets the copyeditor file for the submission
                                        <code><![CDATA[&$sectionEditorSubmission]]></code> to
                                        <code><![CDATA[&$fileId]]></code> with revision
                                        <code><![CDATA[&$revision]]></code>. To prevent this
                                    change from taking place, the hook registrant should return
                                        <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;resubmitFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS resubmits a file
                                        (<code><![CDATA[&$fileId]]></code> and
                                        <code><![CDATA[&$revision]]></code>) belonging to
                                    submission
                                    <code><![CDATA[&$sectionEditorSubmission]]></code> for
                                    review. To prevent this action from taking place, the hook
                                    registrant should return <code>true</code> from its
                                callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;selectCopyeditor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$copyeditorId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS designates the user with ID
                                        <code><![CDATA[&$copyeditorId]]></code> as copyeditor
                                    for the submission
                                        <code><![CDATA[&$sectionEditorSubmission]]></code>. To
                                    prevent this from taking place, the hook registrant should
                                    return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;notifyCopyeditor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$copyeditor]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS notifies the copyeditor
                                        <code><![CDATA[&$copyeditor]]></code> about their
                                    copyediting assignment for submission
                                        <code><![CDATA[&$sectionEditorSubmission]]></code>,
                                    sending <code><![CDATA[&$email]]></code> if enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;initiateCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before flagging the beginning of an editor copyediting
                                    stage on submission
                                        <code><![CDATA[&$sectionEditorSubmission]]></code>. To
                                    prevent this from taking place, the hook registrant should
                                    return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;thankCopyeditor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$copyeditor]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS thanks a copyeditor
                                        (<code><![CDATA[&$copyeditor]]></code>) for contributing
                                    to the submission
                                        <code><![CDATA[&$sectionEditorSubmission]]></code>,
                                    sending the email <code><![CDATA[&$email]]></code> if
                                    enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;notifyAuthorCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$author]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags notification of an author
                                        (<code><![CDATA[&$author]]></code>) of their copyediting
                                    assignment on a submission
                                        (<code><![CDATA[&$sectionEditorSubmission]]></code>),
                                    sending the email <code><![CDATA[&$email]]></code> if
                                    enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;thankAuthorCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$author]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records thanking an author
                                        (<code><![CDATA[&$author]]></code>) for their
                                    copyediting contribution to
                                        <code><![CDATA[&$sectionEditorSubmission]]></code>,
                                    sending <code><![CDATA[&$email]]></code> if enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;notifyFinalCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$copyeditor]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records notifying the copyeditor
                                        (<code><![CDATA[&$copyeditor]]></code>) of their final
                                    copyediting stage for the submission
                                        <code><![CDATA[&$sectionEditorSubmission]]></code>,
                                    sending <code><![CDATA[&$email]]></code> if enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;thankFinalCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$copyeditor]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records thanking a copyeditor
                                        (<code><![CDATA[&$copyeditor]]></code>) for their
                                    final-round copyediting contribution to submission
                                        <code><![CDATA[&$sectionEditorSubmission]]></code>,
                                    sending <code><![CDATA[&$email]]></code> if enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;uploadReviewVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS stores a new review version for the
                                    submission
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>. To
                                    prevent OJS from doing this, the hook registrant should return
                                    true from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;uploadEditorVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS stores a new editing version for the
                                    submission
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>. To
                                    prevent OJS from doing this, the hook registrant should return
                                    true from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;uploadCopyeditVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS stores a new copyediting version for the
                                    submission
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>. To
                                    prevent OJS from doing this, the hook registrant should return
                                    true from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;completeCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a completion date for copyediting on
                                    a submission
                                    (<code><![CDATA[&$sectionEditorSubmission]]></code>)
                                    performed for the editor (when the use of copyeditors is
                                    disabled). To prevent OJS from recording this, the hook
                                    registrant should return <code>true</code> from its
                                callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;completeFinalCopyedit</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a completion date for the final
                                    copyediting stage on a submission
                                        (<code><![CDATA[&$sectionEditorSubmission]]></code>)
                                    performed for the editor (when the use of copyeditors is
                                    disabled). To prevent OJS from recording this, the hook
                                    registrant should return <code>true</code> from its
                                callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;archiveSubmission</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS archives a submission
                                        (<code><![CDATA[&$sectionEditorSubmission]]></code>). If
                                    this action should not be performed, the hook registrant should
                                    return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;restoreToQueue</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$sectionEditorSubmission]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS restores a submission
                                        (<code><![CDATA[&$sectionEditorSubmission]]></code>)
                                    from the archives into an active queue. If this action should
                                    not be performed, the hook registrant should return
                                    <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;updateSection</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$sectionId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS moves the article
                                        <code><![CDATA[&$submission]]></code> into the section
                                    with ID <code><![CDATA[&$sectionId]]></code>. To prevent OJS
                                    from performing this action, the hook registrant should return
                                        <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;uploadLayoutVersion</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$layoutAssignment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS stores a new layout version of the
                                    submission <code><![CDATA[&$submission]]></code> with the
                                    given layout assignment
                                    <code><![CDATA[&$layoutAssignment]]></code>. To prevent OJS
                                    from performing this action, the hook registrant should return
                                        <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;assignLayoutEditor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$editorId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS assigns the layout editor with user ID
                                        <code><![CDATA[&$editorId]]></code> to submission
                                        <code><![CDATA[&$submission]]></code>. To prevent OJS
                                    from performing this action, the hook registrant should return
                                    true from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;notifyLayoutEditor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$layoutEditor]]></code>,
                                        <code><![CDATA[&$layoutAssignment]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS flags notification of the layout editor
                                        <code><![CDATA[&$layoutEditor]]></code> for the
                                    submission <code><![CDATA[&$submission]]></code>, sending
                                    the email <code><![CDATA[&$email]]></code> if
                                enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;thankLayoutEditor</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$layoutEditor]]></code>,
                                        <code><![CDATA[&$layoutAssignment]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records thanking the layout editor
                                        <code><![CDATA[&$layoutEditor]]></code> for their work
                                    on the submission <code><![CDATA[&$submission]]></code>,
                                    sending the email <code><![CDATA[&$email]]></code> if
                                    enabled.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;deleteArticleFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes an article galley image
                                        (<code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) for the submission
                                        <code><![CDATA[&$submission]]></code>. To prevent OJS
                                    from performing this action, the hook registrant should return
                                    true from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;deleteArticleImage</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes an article image
                                        (<code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) for the submission
                                        <code><![CDATA[&$submission]]></code>. To prevent OJS
                                    from performing this action, the hook registrant should return
                                    true from its callback. (This hook is only available on OJS
                                    2.1.1 and later.)</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;addSubmissionNote</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$articleId]]></code>,
                                        <code><![CDATA[&$articleNote]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS adds a submission note
                                        (<code><![CDATA[&$articleNote]]></code>) to a submission
                                    with article ID <code><![CDATA[&$articleId]]></code>. To
                                    prevent OJS from performing this action, the hook registrant
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;removeSubmissionNote</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$articleId]]></code>,
                                        <code><![CDATA[&$noteId]]></code>,
                                        <code><![CDATA[&$fileId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS removes the submission note
                                        (<code><![CDATA[&$noteId]]></code>) and, if present, the
                                    associated file (<code><![CDATA[&$fileId]]></code>) from the
                                    submission with article ID
                                    <code><![CDATA[&$articleId]]></code>. To prevent OJS from
                                    performing this action, the hook registrant should return
                                        <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;updateSubmissionNote</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$articleId]]></code>,
                                        <code><![CDATA[&$articleNote]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS saves the changes to a submission note on
                                    the article with ID <code><![CDATA[&$articleId]]></code>,
                                    already performed on the object
                                        <code><![CDATA[&$articleNote]]></code> but not committed
                                    to database. The new attached file, if one has been uploaded,
                                    has not been stored yet. To prevent OJS from storing the
                                    changes, the hook registrant should return <code>true</code>
                                    from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;clearAllSubmissionNotes</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$articleId]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS removes all submission notes and, if
                                    present, the associated files from the submission with article
                                    ID <code><![CDATA[&$articleId]]></code>. To prevent OJS from
                                    performing this action, the hook registrant should return
                                        <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;viewPeerReviewComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$reviewId]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS displays the peer review comments to the
                                    editor or section editor for the given article
                                        (<code><![CDATA[&$article]]></code>) and review ID
                                        (<code><![CDATA[&$reviewId]]></code>). If the hook
                                    registrant wishes to prevent OJS from displaying the reviews, it
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;postPeerReviewComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$reviewId]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a new comment on the given review ID
                                        (<code><![CDATA[&$reviewId]]></code>) by the editor or
                                    section editor on an article
                                    (<code><![CDATA[&$article]]></code>). If the hook registrant
                                    wishes to prevent OJS from recording the comment, it should
                                    return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;viewEditorDecisionComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the Editor or Section Editor requests the editor
                                    decision comments for the article
                                        <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;postEditorDecisionComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS records a new editor comment on the
                                    submission <code><![CDATA[&$article]]></code>. To prevent
                                    OJS from performing this action, the hook callback should return
                                    true.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;emailEditorDecisionComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$send]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS emails the author an editor decision comment
                                    on a submission
                                    (<code><![CDATA[&$sectionEditorDecision]]></code>).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;blindCcReviewsToReviewers</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$reviewAssignments]]></code>,
                                        <code><![CDATA[&$email]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS anonymously sends the reviews
                                        (<code><![CDATA[&$reviewAssignments]]></code>) email
                                        (<code><![CDATA[&$email]]></code>) to reviewers for the
                                    article <code><![CDATA[&$article]]></code>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;viewCopyeditComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the editor or section editor requests the
                                    copyediting comments for the article
                                        <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;postCopyeditComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the editor or section editor attempts to post a
                                    copyediting comment on the article
                                        <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from recording the supplied
                                    comment, it should return <code>true</code> from the callback
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;viewLayoutComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the section editor or editor requests the layout
                                    comments for the article <code><![CDATA[&$article]]></code>.
                                    If the hook registrant wishes to prevent OJS from instantiating
                                    and displaying the comment form, it should return
                                    <code>true</code> from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;postLayoutComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the section editor or editor attempts to post a
                                    layout comment on the article
                                    <code><![CDATA[&$article]]></code>. If the hook registrant
                                    wishes to prevent OJS from recording the supplied comment, it
                                    should return <code>true</code> from the callback
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;viewProofreadComments</code>
                                </para>
                            </entry>
                            <entry>
                                <para>
                                    <code><![CDATA[&$article]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called when the editor or section editor requests the
                                    proofreading comments for the article
                                        <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from instantiating and
                                    displaying the comment form, it should return <code>true</code>
                                    from the callback function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;postProofreadComment</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$article]]></code>,
                                        <code><![CDATA[&$emailComment]]></code></para>
                            </entry>
                            <entry>
                                <para>Called when the editor or section editor attempts to post a
                                    proofreading comment on the article
                                        <code><![CDATA[&$article]]></code>. If the hook
                                    registrant wishes to prevent OJS from recording the supplied
                                    comment, it should return <code>true</code> from the callback
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;confirmReviewForReviewer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$reviewer]]></code>,</para>
                                <para>
                                    <code><![CDATA[&$accept]]></code>
                                </para>
                            </entry>
                            <entry>
                                <para>Called before OJS records the editor's acceptance or refusal
                                    of a review assignment
                                    (<code><![CDATA[&$reviewAssignment]]></code>) on behalf of a
                                    reviewer (<code><![CDATA[&$reviewer]]></code>). To prevent
                                    OJS from performing this action, the hook registrant should
                                    return <code>true</code> from its callback. Prior to OJS 2.2,
                                    this hook was called
                                        <code>SectionEditorAction::&#x200b;acceptReviewForReviewer</code>
                                    (without the <code>$accept</code> parameter).</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorAction::&#x200b;uploadReviewForReviewer</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$reviewAssignment]]></code>,
                                        <code><![CDATA[&$reviewer]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS stores an editor's review upload for a
                                    review assignment
                                    (<code><![CDATA[&$reviewAssignment]]></code>) on behalf of a
                                    reviewer (<code><![CDATA[&$reviewer]]></code>). To prevent
                                    OJS from performing this action, the hook registrant should
                                    return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorSubmissionDAO::&#x200b;_returnSectionEditorSubmissionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$sectionEditorSubmission]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>SectionEditorSubmissionDAO</code> builds a
                                        <code>SectionEditorSubmission</code>
                                        (<code><![CDATA[&$sectionEditorSubmission]]></code>)
                                    object from the database row
                                    (<code><![CDATA[&$row]]></code>), but before the submission
                                    is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SectionEditorSubmissionDAO::&#x200b;_returnReviewerUserFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$user]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>SectionEditorSubmissionDAO</code> builds a
                                        <code>User</code> (<code><![CDATA[&$user]]></code>)
                                    object from the database row
                                    (<code><![CDATA[&$row]]></code>), but before the submission
                                    is passed back to the calling function. The use of this hook is
                                    not recommended as it may be removed in the future.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>CurrencyDAO::&#x200b;_returnCurrencyFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$currency]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>CurrencyDAO</code> builds a
                                    <code>Currency</code> (<code><![CDATA[&$currency]]></code>)
                                    object from the database row
                                    (<code><![CDATA[&$row]]></code>), but before the currency is
                                    passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SubscriptionDAO::&#x200b;_returnSubscriptionFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$subscription]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>SubscriptionDAO</code> builds a
                                        <code>Subscription</code>
                                        (<code><![CDATA[&$subscription]]></code>) object from
                                    the database row (<code><![CDATA[&$row]]></code>), but
                                    before the subscription is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>SubscriptionTypeDAO::&#x200b;_returnSubscriptionTypeFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$subscription]]></code>Type,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>SubscriptionTypeDAO</code> builds a
                                        <code>SubscriptionType</code>
                                        (<code><![CDATA[&$subscription]]></code>Type) object
                                    from the database row (<code><![CDATA[&$row]]></code>), but
                                    before the subscription type is passed back to the calling
                                    function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>TemplateManager::&#x200b;display</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$template]]></code>,
                                        <code><![CDATA[&$sendContentType]]></code>,
                                        <code><![CDATA[&$charset]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before the template manager
                                        (<code><![CDATA[&$templateMgr]]></code>) sends the
                                    content type header with the given content type
                                        (<code><![CDATA[&$sendContentType]]></code>) and
                                    character set (<code><![CDATA[&$charset]]></code>) and
                                    displays a template (<code><![CDATA[&$template]]></code>).
                                    To prevent OJS from performing this action, the hook registrant
                                    should return <code>true</code> from its callback.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>UserDAO::&#x200b;_returnUserFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$user]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>UserDAO</code> builds a <code>User</code>
                                        (<code><![CDATA[&$user]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the user is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>GroupDAO::&#x200b;_returnGroupFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$group]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>GroupDAO</code> builds a <code>Group</code>
                                        (<code><![CDATA[&$group]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the group is passed back to the calling function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>GroupMembershipDAO::&#x200b;_returnMemberFromRow</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$membership]]></code>,
                                        <code><![CDATA[&$row]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after <code>GroupMembershipDAO</code> builds a
                                        <code>GroupMembership</code>
                                        (<code><![CDATA[&$membership]]></code>) object from the
                                    database row (<code><![CDATA[&$row]]></code>), but before
                                    the group membership is passed back to the calling
                                function.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;About::&#x200b;Index::&#x200b;People</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the People section
                                    of the About page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;About::&#x200b;Index::&#x200b;Policies</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Policies section
                                    of the About page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;About::&#x200b;Index::&#x200b;Submissions</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Submissions
                                    section of the About page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;About::&#x200b;Index::&#x200b;Other</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Other section of
                                    the About page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Admin::&#x200b;Index::&#x200b;SiteManagement</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Site Management
                                    section of the site administration page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Admin::&#x200b;Index::&#x200b;AdminFunctions</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Admin Functions
                                    section of the site administration page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Editor::&#x200b;Index::&#x200b;Submissions</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Submissions
                                    section of the editor's page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Editor::&#x200b;Index::&#x200b;Issues</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Issues section
                                    of the editor's page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Manager::&#x200b;Index::&#x200b;ManagementPages</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Management Pages
                                    section of the journal manager's page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Manager::&#x200b;Index::&#x200b;Users</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Users section of
                                    the journal manager's page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Manager::&#x200b;Index::&#x200b;Roles</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the Roles section of
                                    the journal manager's page, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;User::&#x200b;Index::&#x200b;Site</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called after the site management link is displayed (if
                                    applicable) in the user home, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;User::&#x200b;Index::&#x200b;Journal</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list displaying the roles
                                    for each journal in the user home, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>Templates::&#x200b;Admin::&#x200b;Index::&#x200b;MyAccount</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$params]]></code>,
                                        <code><![CDATA[&$templateMgr]]></code>,
                                        <code><![CDATA[&$output]]></code></para>
                            </entry>
                            <entry>
                                <para>Called at the end of the bulleted list in the My Account
                                    section of the user home, within the
                                    <![CDATA[<ul class="plain">...</ul>]]> tag.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>
                                    <code>LayoutEditorAction::&#x200b;deleteArticleFile</code>
                                </para>
                            </entry>
                            <entry>
                                <para><code><![CDATA[&$submission]]></code>,
                                        <code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code></para>
                            </entry>
                            <entry>
                                <para>Called before OJS deletes an article galley image
                                        (<code><![CDATA[&$fileId]]></code>,
                                        <code><![CDATA[&$revision]]></code>) for the submission
                                        <code><![CDATA[&$submission]]></code>. To prevent OJS
                                    from performing this action, the hook registrant should return
                                    true from its callback. (This hook is only available on OJS
                                    2.1.1 and later.)</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect1>

    </chapter>

    <chapter xml:id="obtainingMoreInformation">
        <title>Obtaining More Information</title>

        <para>For more information, see the PKP web site at <link xlink:href="http://pkp.sfu.ca/"
                >http://pkp.sfu.ca</link>. There is an OJS support forum available at <link
                xlink:href="http://pkp.sfu.ca/support/forum">http://pkp.sfu.ca/support/forum</link>;
            this is the preferred method of contacting the OJS team. Please be sure to search the
            forum archives to see if your question has already been answered.</para>

        <para>If you have a bug to report, see the bug tracking system at <link
                xlink:href="http://pkp.sfu.ca/bugzilla">http://pkp.sfu.ca/bugzilla</link>.</para>
    </chapter>
</book>
